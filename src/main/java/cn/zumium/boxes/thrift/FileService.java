/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.zumium.boxes.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-02-17")
public class FileService {

  public interface Iface {

    public void add(long boxId, java.lang.String innerPath, java.lang.String outerPath, AddBy addBy) throws ServiceException, org.apache.thrift.TException;

    public void fetch(long boxId, java.lang.String innerPath, java.lang.String outerPath, FetchBy fetchBy) throws ServiceException, org.apache.thrift.TException;

    public void remove(long boxId, java.lang.String innerPath) throws ServiceException, org.apache.thrift.TException;

    public java.util.List<LsItem> ls(long boxId, java.lang.String innerDir) throws ServiceException, org.apache.thrift.TException;

    public void move(long srcBoxId, java.lang.String srcInnerPath, long dstBoxId, java.lang.String dstInnerPath) throws ServiceException, org.apache.thrift.TException;

    public void copy(long srcBoxId, java.lang.String srcInnerPath, long dstBoxId, java.lang.String dstInnerPath) throws ServiceException, org.apache.thrift.TException;

    public void innerMove(long boxId, java.lang.String srcInnerPath, java.lang.String dstInnerPath) throws ServiceException, org.apache.thrift.TException;

    public void innerCopy(long boxId, java.lang.String srcInnerPath, java.lang.String dstInnerPath) throws ServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void add(long boxId, java.lang.String innerPath, java.lang.String outerPath, AddBy addBy, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void fetch(long boxId, java.lang.String innerPath, java.lang.String outerPath, FetchBy fetchBy, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void remove(long boxId, java.lang.String innerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void ls(long boxId, java.lang.String innerDir, org.apache.thrift.async.AsyncMethodCallback<java.util.List<LsItem>> resultHandler) throws org.apache.thrift.TException;

    public void move(long srcBoxId, java.lang.String srcInnerPath, long dstBoxId, java.lang.String dstInnerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void copy(long srcBoxId, java.lang.String srcInnerPath, long dstBoxId, java.lang.String dstInnerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void innerMove(long boxId, java.lang.String srcInnerPath, java.lang.String dstInnerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void innerCopy(long boxId, java.lang.String srcInnerPath, java.lang.String dstInnerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void add(long boxId, java.lang.String innerPath, java.lang.String outerPath, AddBy addBy) throws ServiceException, org.apache.thrift.TException
    {
      send_add(boxId, innerPath, outerPath, addBy);
      recv_add();
    }

    public void send_add(long boxId, java.lang.String innerPath, java.lang.String outerPath, AddBy addBy) throws org.apache.thrift.TException
    {
      add_args args = new add_args();
      args.setBoxId(boxId);
      args.setInnerPath(innerPath);
      args.setOuterPath(outerPath);
      args.setAddBy(addBy);
      sendBase("add", args);
    }

    public void recv_add() throws ServiceException, org.apache.thrift.TException
    {
      add_result result = new add_result();
      receiveBase(result, "add");
      if (result.excp != null) {
        throw result.excp;
      }
      return;
    }

    public void fetch(long boxId, java.lang.String innerPath, java.lang.String outerPath, FetchBy fetchBy) throws ServiceException, org.apache.thrift.TException
    {
      send_fetch(boxId, innerPath, outerPath, fetchBy);
      recv_fetch();
    }

    public void send_fetch(long boxId, java.lang.String innerPath, java.lang.String outerPath, FetchBy fetchBy) throws org.apache.thrift.TException
    {
      fetch_args args = new fetch_args();
      args.setBoxId(boxId);
      args.setInnerPath(innerPath);
      args.setOuterPath(outerPath);
      args.setFetchBy(fetchBy);
      sendBase("fetch", args);
    }

    public void recv_fetch() throws ServiceException, org.apache.thrift.TException
    {
      fetch_result result = new fetch_result();
      receiveBase(result, "fetch");
      if (result.excp != null) {
        throw result.excp;
      }
      return;
    }

    public void remove(long boxId, java.lang.String innerPath) throws ServiceException, org.apache.thrift.TException
    {
      send_remove(boxId, innerPath);
      recv_remove();
    }

    public void send_remove(long boxId, java.lang.String innerPath) throws org.apache.thrift.TException
    {
      remove_args args = new remove_args();
      args.setBoxId(boxId);
      args.setInnerPath(innerPath);
      sendBase("remove", args);
    }

    public void recv_remove() throws ServiceException, org.apache.thrift.TException
    {
      remove_result result = new remove_result();
      receiveBase(result, "remove");
      if (result.excp != null) {
        throw result.excp;
      }
      return;
    }

    public java.util.List<LsItem> ls(long boxId, java.lang.String innerDir) throws ServiceException, org.apache.thrift.TException
    {
      send_ls(boxId, innerDir);
      return recv_ls();
    }

    public void send_ls(long boxId, java.lang.String innerDir) throws org.apache.thrift.TException
    {
      ls_args args = new ls_args();
      args.setBoxId(boxId);
      args.setInnerDir(innerDir);
      sendBase("ls", args);
    }

    public java.util.List<LsItem> recv_ls() throws ServiceException, org.apache.thrift.TException
    {
      ls_result result = new ls_result();
      receiveBase(result, "ls");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.excp != null) {
        throw result.excp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ls failed: unknown result");
    }

    public void move(long srcBoxId, java.lang.String srcInnerPath, long dstBoxId, java.lang.String dstInnerPath) throws ServiceException, org.apache.thrift.TException
    {
      send_move(srcBoxId, srcInnerPath, dstBoxId, dstInnerPath);
      recv_move();
    }

    public void send_move(long srcBoxId, java.lang.String srcInnerPath, long dstBoxId, java.lang.String dstInnerPath) throws org.apache.thrift.TException
    {
      move_args args = new move_args();
      args.setSrcBoxId(srcBoxId);
      args.setSrcInnerPath(srcInnerPath);
      args.setDstBoxId(dstBoxId);
      args.setDstInnerPath(dstInnerPath);
      sendBase("move", args);
    }

    public void recv_move() throws ServiceException, org.apache.thrift.TException
    {
      move_result result = new move_result();
      receiveBase(result, "move");
      if (result.excp != null) {
        throw result.excp;
      }
      return;
    }

    public void copy(long srcBoxId, java.lang.String srcInnerPath, long dstBoxId, java.lang.String dstInnerPath) throws ServiceException, org.apache.thrift.TException
    {
      send_copy(srcBoxId, srcInnerPath, dstBoxId, dstInnerPath);
      recv_copy();
    }

    public void send_copy(long srcBoxId, java.lang.String srcInnerPath, long dstBoxId, java.lang.String dstInnerPath) throws org.apache.thrift.TException
    {
      copy_args args = new copy_args();
      args.setSrcBoxId(srcBoxId);
      args.setSrcInnerPath(srcInnerPath);
      args.setDstBoxId(dstBoxId);
      args.setDstInnerPath(dstInnerPath);
      sendBase("copy", args);
    }

    public void recv_copy() throws ServiceException, org.apache.thrift.TException
    {
      copy_result result = new copy_result();
      receiveBase(result, "copy");
      if (result.excp != null) {
        throw result.excp;
      }
      return;
    }

    public void innerMove(long boxId, java.lang.String srcInnerPath, java.lang.String dstInnerPath) throws ServiceException, org.apache.thrift.TException
    {
      send_innerMove(boxId, srcInnerPath, dstInnerPath);
      recv_innerMove();
    }

    public void send_innerMove(long boxId, java.lang.String srcInnerPath, java.lang.String dstInnerPath) throws org.apache.thrift.TException
    {
      innerMove_args args = new innerMove_args();
      args.setBoxId(boxId);
      args.setSrcInnerPath(srcInnerPath);
      args.setDstInnerPath(dstInnerPath);
      sendBase("innerMove", args);
    }

    public void recv_innerMove() throws ServiceException, org.apache.thrift.TException
    {
      innerMove_result result = new innerMove_result();
      receiveBase(result, "innerMove");
      if (result.excp != null) {
        throw result.excp;
      }
      return;
    }

    public void innerCopy(long boxId, java.lang.String srcInnerPath, java.lang.String dstInnerPath) throws ServiceException, org.apache.thrift.TException
    {
      send_innerCopy(boxId, srcInnerPath, dstInnerPath);
      recv_innerCopy();
    }

    public void send_innerCopy(long boxId, java.lang.String srcInnerPath, java.lang.String dstInnerPath) throws org.apache.thrift.TException
    {
      innerCopy_args args = new innerCopy_args();
      args.setBoxId(boxId);
      args.setSrcInnerPath(srcInnerPath);
      args.setDstInnerPath(dstInnerPath);
      sendBase("innerCopy", args);
    }

    public void recv_innerCopy() throws ServiceException, org.apache.thrift.TException
    {
      innerCopy_result result = new innerCopy_result();
      receiveBase(result, "innerCopy");
      if (result.excp != null) {
        throw result.excp;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void add(long boxId, java.lang.String innerPath, java.lang.String outerPath, AddBy addBy, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      add_call method_call = new add_call(boxId, innerPath, outerPath, addBy, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class add_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long boxId;
      private java.lang.String innerPath;
      private java.lang.String outerPath;
      private AddBy addBy;
      public add_call(long boxId, java.lang.String innerPath, java.lang.String outerPath, AddBy addBy, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.boxId = boxId;
        this.innerPath = innerPath;
        this.outerPath = outerPath;
        this.addBy = addBy;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add", org.apache.thrift.protocol.TMessageType.CALL, 0));
        add_args args = new add_args();
        args.setBoxId(boxId);
        args.setInnerPath(innerPath);
        args.setOuterPath(outerPath);
        args.setAddBy(addBy);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void fetch(long boxId, java.lang.String innerPath, java.lang.String outerPath, FetchBy fetchBy, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetch_call method_call = new fetch_call(boxId, innerPath, outerPath, fetchBy, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetch_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long boxId;
      private java.lang.String innerPath;
      private java.lang.String outerPath;
      private FetchBy fetchBy;
      public fetch_call(long boxId, java.lang.String innerPath, java.lang.String outerPath, FetchBy fetchBy, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.boxId = boxId;
        this.innerPath = innerPath;
        this.outerPath = outerPath;
        this.fetchBy = fetchBy;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetch_args args = new fetch_args();
        args.setBoxId(boxId);
        args.setInnerPath(innerPath);
        args.setOuterPath(outerPath);
        args.setFetchBy(fetchBy);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void remove(long boxId, java.lang.String innerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      remove_call method_call = new remove_call(boxId, innerPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class remove_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long boxId;
      private java.lang.String innerPath;
      public remove_call(long boxId, java.lang.String innerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.boxId = boxId;
        this.innerPath = innerPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        remove_args args = new remove_args();
        args.setBoxId(boxId);
        args.setInnerPath(innerPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void ls(long boxId, java.lang.String innerDir, org.apache.thrift.async.AsyncMethodCallback<java.util.List<LsItem>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ls_call method_call = new ls_call(boxId, innerDir, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ls_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<LsItem>> {
      private long boxId;
      private java.lang.String innerDir;
      public ls_call(long boxId, java.lang.String innerDir, org.apache.thrift.async.AsyncMethodCallback<java.util.List<LsItem>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.boxId = boxId;
        this.innerDir = innerDir;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ls", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ls_args args = new ls_args();
        args.setBoxId(boxId);
        args.setInnerDir(innerDir);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<LsItem> getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ls();
      }
    }

    public void move(long srcBoxId, java.lang.String srcInnerPath, long dstBoxId, java.lang.String dstInnerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      move_call method_call = new move_call(srcBoxId, srcInnerPath, dstBoxId, dstInnerPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class move_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long srcBoxId;
      private java.lang.String srcInnerPath;
      private long dstBoxId;
      private java.lang.String dstInnerPath;
      public move_call(long srcBoxId, java.lang.String srcInnerPath, long dstBoxId, java.lang.String dstInnerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.srcBoxId = srcBoxId;
        this.srcInnerPath = srcInnerPath;
        this.dstBoxId = dstBoxId;
        this.dstInnerPath = dstInnerPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("move", org.apache.thrift.protocol.TMessageType.CALL, 0));
        move_args args = new move_args();
        args.setSrcBoxId(srcBoxId);
        args.setSrcInnerPath(srcInnerPath);
        args.setDstBoxId(dstBoxId);
        args.setDstInnerPath(dstInnerPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void copy(long srcBoxId, java.lang.String srcInnerPath, long dstBoxId, java.lang.String dstInnerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      copy_call method_call = new copy_call(srcBoxId, srcInnerPath, dstBoxId, dstInnerPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class copy_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long srcBoxId;
      private java.lang.String srcInnerPath;
      private long dstBoxId;
      private java.lang.String dstInnerPath;
      public copy_call(long srcBoxId, java.lang.String srcInnerPath, long dstBoxId, java.lang.String dstInnerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.srcBoxId = srcBoxId;
        this.srcInnerPath = srcInnerPath;
        this.dstBoxId = dstBoxId;
        this.dstInnerPath = dstInnerPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("copy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        copy_args args = new copy_args();
        args.setSrcBoxId(srcBoxId);
        args.setSrcInnerPath(srcInnerPath);
        args.setDstBoxId(dstBoxId);
        args.setDstInnerPath(dstInnerPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void innerMove(long boxId, java.lang.String srcInnerPath, java.lang.String dstInnerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      innerMove_call method_call = new innerMove_call(boxId, srcInnerPath, dstInnerPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class innerMove_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long boxId;
      private java.lang.String srcInnerPath;
      private java.lang.String dstInnerPath;
      public innerMove_call(long boxId, java.lang.String srcInnerPath, java.lang.String dstInnerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.boxId = boxId;
        this.srcInnerPath = srcInnerPath;
        this.dstInnerPath = dstInnerPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("innerMove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        innerMove_args args = new innerMove_args();
        args.setBoxId(boxId);
        args.setSrcInnerPath(srcInnerPath);
        args.setDstInnerPath(dstInnerPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void innerCopy(long boxId, java.lang.String srcInnerPath, java.lang.String dstInnerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      innerCopy_call method_call = new innerCopy_call(boxId, srcInnerPath, dstInnerPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class innerCopy_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long boxId;
      private java.lang.String srcInnerPath;
      private java.lang.String dstInnerPath;
      public innerCopy_call(long boxId, java.lang.String srcInnerPath, java.lang.String dstInnerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.boxId = boxId;
        this.srcInnerPath = srcInnerPath;
        this.dstInnerPath = dstInnerPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("innerCopy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        innerCopy_args args = new innerCopy_args();
        args.setBoxId(boxId);
        args.setSrcInnerPath(srcInnerPath);
        args.setDstInnerPath(dstInnerPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("add", new add());
      processMap.put("fetch", new fetch());
      processMap.put("remove", new remove());
      processMap.put("ls", new ls());
      processMap.put("move", new move());
      processMap.put("copy", new copy());
      processMap.put("innerMove", new innerMove());
      processMap.put("innerCopy", new innerCopy());
      return processMap;
    }

    public static class add<I extends Iface> extends org.apache.thrift.ProcessFunction<I, add_args> {
      public add() {
        super("add");
      }

      public add_args getEmptyArgsInstance() {
        return new add_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public add_result getResult(I iface, add_args args) throws org.apache.thrift.TException {
        add_result result = new add_result();
        try {
          iface.add(args.boxId, args.innerPath, args.outerPath, args.addBy);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class fetch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetch_args> {
      public fetch() {
        super("fetch");
      }

      public fetch_args getEmptyArgsInstance() {
        return new fetch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public fetch_result getResult(I iface, fetch_args args) throws org.apache.thrift.TException {
        fetch_result result = new fetch_result();
        try {
          iface.fetch(args.boxId, args.innerPath, args.outerPath, args.fetchBy);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class remove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, remove_args> {
      public remove() {
        super("remove");
      }

      public remove_args getEmptyArgsInstance() {
        return new remove_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public remove_result getResult(I iface, remove_args args) throws org.apache.thrift.TException {
        remove_result result = new remove_result();
        try {
          iface.remove(args.boxId, args.innerPath);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class ls<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ls_args> {
      public ls() {
        super("ls");
      }

      public ls_args getEmptyArgsInstance() {
        return new ls_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ls_result getResult(I iface, ls_args args) throws org.apache.thrift.TException {
        ls_result result = new ls_result();
        try {
          result.success = iface.ls(args.boxId, args.innerDir);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class move<I extends Iface> extends org.apache.thrift.ProcessFunction<I, move_args> {
      public move() {
        super("move");
      }

      public move_args getEmptyArgsInstance() {
        return new move_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public move_result getResult(I iface, move_args args) throws org.apache.thrift.TException {
        move_result result = new move_result();
        try {
          iface.move(args.srcBoxId, args.srcInnerPath, args.dstBoxId, args.dstInnerPath);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class copy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, copy_args> {
      public copy() {
        super("copy");
      }

      public copy_args getEmptyArgsInstance() {
        return new copy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public copy_result getResult(I iface, copy_args args) throws org.apache.thrift.TException {
        copy_result result = new copy_result();
        try {
          iface.copy(args.srcBoxId, args.srcInnerPath, args.dstBoxId, args.dstInnerPath);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class innerMove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, innerMove_args> {
      public innerMove() {
        super("innerMove");
      }

      public innerMove_args getEmptyArgsInstance() {
        return new innerMove_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public innerMove_result getResult(I iface, innerMove_args args) throws org.apache.thrift.TException {
        innerMove_result result = new innerMove_result();
        try {
          iface.innerMove(args.boxId, args.srcInnerPath, args.dstInnerPath);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class innerCopy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, innerCopy_args> {
      public innerCopy() {
        super("innerCopy");
      }

      public innerCopy_args getEmptyArgsInstance() {
        return new innerCopy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public innerCopy_result getResult(I iface, innerCopy_args args) throws org.apache.thrift.TException {
        innerCopy_result result = new innerCopy_result();
        try {
          iface.innerCopy(args.boxId, args.srcInnerPath, args.dstInnerPath);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("add", new add());
      processMap.put("fetch", new fetch());
      processMap.put("remove", new remove());
      processMap.put("ls", new ls());
      processMap.put("move", new move());
      processMap.put("copy", new copy());
      processMap.put("innerMove", new innerMove());
      processMap.put("innerCopy", new innerCopy());
      return processMap;
    }

    public static class add<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, add_args, Void> {
      public add() {
        super("add");
      }

      public add_args getEmptyArgsInstance() {
        return new add_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            add_result result = new add_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            add_result result = new add_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, add_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.add(args.boxId, args.innerPath, args.outerPath, args.addBy,resultHandler);
      }
    }

    public static class fetch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetch_args, Void> {
      public fetch() {
        super("fetch");
      }

      public fetch_args getEmptyArgsInstance() {
        return new fetch_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            fetch_result result = new fetch_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fetch_result result = new fetch_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetch_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.fetch(args.boxId, args.innerPath, args.outerPath, args.fetchBy,resultHandler);
      }
    }

    public static class remove<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, remove_args, Void> {
      public remove() {
        super("remove");
      }

      public remove_args getEmptyArgsInstance() {
        return new remove_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            remove_result result = new remove_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            remove_result result = new remove_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, remove_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.remove(args.boxId, args.innerPath,resultHandler);
      }
    }

    public static class ls<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ls_args, java.util.List<LsItem>> {
      public ls() {
        super("ls");
      }

      public ls_args getEmptyArgsInstance() {
        return new ls_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<LsItem>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<LsItem>>() { 
          public void onComplete(java.util.List<LsItem> o) {
            ls_result result = new ls_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ls_result result = new ls_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ls_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<LsItem>> resultHandler) throws org.apache.thrift.TException {
        iface.ls(args.boxId, args.innerDir,resultHandler);
      }
    }

    public static class move<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, move_args, Void> {
      public move() {
        super("move");
      }

      public move_args getEmptyArgsInstance() {
        return new move_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            move_result result = new move_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            move_result result = new move_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, move_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.move(args.srcBoxId, args.srcInnerPath, args.dstBoxId, args.dstInnerPath,resultHandler);
      }
    }

    public static class copy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, copy_args, Void> {
      public copy() {
        super("copy");
      }

      public copy_args getEmptyArgsInstance() {
        return new copy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            copy_result result = new copy_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            copy_result result = new copy_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, copy_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.copy(args.srcBoxId, args.srcInnerPath, args.dstBoxId, args.dstInnerPath,resultHandler);
      }
    }

    public static class innerMove<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, innerMove_args, Void> {
      public innerMove() {
        super("innerMove");
      }

      public innerMove_args getEmptyArgsInstance() {
        return new innerMove_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            innerMove_result result = new innerMove_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            innerMove_result result = new innerMove_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, innerMove_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.innerMove(args.boxId, args.srcInnerPath, args.dstInnerPath,resultHandler);
      }
    }

    public static class innerCopy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, innerCopy_args, Void> {
      public innerCopy() {
        super("innerCopy");
      }

      public innerCopy_args getEmptyArgsInstance() {
        return new innerCopy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            innerCopy_result result = new innerCopy_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            innerCopy_result result = new innerCopy_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, innerCopy_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.innerCopy(args.boxId, args.srcInnerPath, args.dstInnerPath,resultHandler);
      }
    }

  }

  public static class add_args implements org.apache.thrift.TBase<add_args, add_args._Fields>, java.io.Serializable, Cloneable, Comparable<add_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_args");

    private static final org.apache.thrift.protocol.TField BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boxId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("innerPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUTER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outerPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ADD_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("addBy", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new add_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new add_argsTupleSchemeFactory();

    public long boxId; // required
    public java.lang.String innerPath; // required
    public java.lang.String outerPath; // required
    /**
     * 
     * @see AddBy
     */
    public AddBy addBy; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOX_ID((short)1, "boxId"),
      INNER_PATH((short)2, "innerPath"),
      OUTER_PATH((short)3, "outerPath"),
      /**
       * 
       * @see AddBy
       */
      ADD_BY((short)4, "addBy");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOX_ID
            return BOX_ID;
          case 2: // INNER_PATH
            return INNER_PATH;
          case 3: // OUTER_PATH
            return OUTER_PATH;
          case 4: // ADD_BY
            return ADD_BY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BOXID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("boxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("innerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTER_PATH, new org.apache.thrift.meta_data.FieldMetaData("outerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADD_BY, new org.apache.thrift.meta_data.FieldMetaData("addBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AddBy.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_args.class, metaDataMap);
    }

    public add_args() {
    }

    public add_args(
      long boxId,
      java.lang.String innerPath,
      java.lang.String outerPath,
      AddBy addBy)
    {
      this();
      this.boxId = boxId;
      setBoxIdIsSet(true);
      this.innerPath = innerPath;
      this.outerPath = outerPath;
      this.addBy = addBy;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_args(add_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.boxId = other.boxId;
      if (other.isSetInnerPath()) {
        this.innerPath = other.innerPath;
      }
      if (other.isSetOuterPath()) {
        this.outerPath = other.outerPath;
      }
      if (other.isSetAddBy()) {
        this.addBy = other.addBy;
      }
    }

    public add_args deepCopy() {
      return new add_args(this);
    }

    @Override
    public void clear() {
      setBoxIdIsSet(false);
      this.boxId = 0;
      this.innerPath = null;
      this.outerPath = null;
      this.addBy = null;
    }

    public long getBoxId() {
      return this.boxId;
    }

    public add_args setBoxId(long boxId) {
      this.boxId = boxId;
      setBoxIdIsSet(true);
      return this;
    }

    public void unsetBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    /** Returns true if field boxId is set (has been assigned a value) and false otherwise */
    public boolean isSetBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    public void setBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOXID_ISSET_ID, value);
    }

    public java.lang.String getInnerPath() {
      return this.innerPath;
    }

    public add_args setInnerPath(java.lang.String innerPath) {
      this.innerPath = innerPath;
      return this;
    }

    public void unsetInnerPath() {
      this.innerPath = null;
    }

    /** Returns true if field innerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInnerPath() {
      return this.innerPath != null;
    }

    public void setInnerPathIsSet(boolean value) {
      if (!value) {
        this.innerPath = null;
      }
    }

    public java.lang.String getOuterPath() {
      return this.outerPath;
    }

    public add_args setOuterPath(java.lang.String outerPath) {
      this.outerPath = outerPath;
      return this;
    }

    public void unsetOuterPath() {
      this.outerPath = null;
    }

    /** Returns true if field outerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOuterPath() {
      return this.outerPath != null;
    }

    public void setOuterPathIsSet(boolean value) {
      if (!value) {
        this.outerPath = null;
      }
    }

    /**
     * 
     * @see AddBy
     */
    public AddBy getAddBy() {
      return this.addBy;
    }

    /**
     * 
     * @see AddBy
     */
    public add_args setAddBy(AddBy addBy) {
      this.addBy = addBy;
      return this;
    }

    public void unsetAddBy() {
      this.addBy = null;
    }

    /** Returns true if field addBy is set (has been assigned a value) and false otherwise */
    public boolean isSetAddBy() {
      return this.addBy != null;
    }

    public void setAddByIsSet(boolean value) {
      if (!value) {
        this.addBy = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOX_ID:
        if (value == null) {
          unsetBoxId();
        } else {
          setBoxId((java.lang.Long)value);
        }
        break;

      case INNER_PATH:
        if (value == null) {
          unsetInnerPath();
        } else {
          setInnerPath((java.lang.String)value);
        }
        break;

      case OUTER_PATH:
        if (value == null) {
          unsetOuterPath();
        } else {
          setOuterPath((java.lang.String)value);
        }
        break;

      case ADD_BY:
        if (value == null) {
          unsetAddBy();
        } else {
          setAddBy((AddBy)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOX_ID:
        return getBoxId();

      case INNER_PATH:
        return getInnerPath();

      case OUTER_PATH:
        return getOuterPath();

      case ADD_BY:
        return getAddBy();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOX_ID:
        return isSetBoxId();
      case INNER_PATH:
        return isSetInnerPath();
      case OUTER_PATH:
        return isSetOuterPath();
      case ADD_BY:
        return isSetAddBy();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof add_args)
        return this.equals((add_args)that);
      return false;
    }

    public boolean equals(add_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_boxId = true;
      boolean that_present_boxId = true;
      if (this_present_boxId || that_present_boxId) {
        if (!(this_present_boxId && that_present_boxId))
          return false;
        if (this.boxId != that.boxId)
          return false;
      }

      boolean this_present_innerPath = true && this.isSetInnerPath();
      boolean that_present_innerPath = true && that.isSetInnerPath();
      if (this_present_innerPath || that_present_innerPath) {
        if (!(this_present_innerPath && that_present_innerPath))
          return false;
        if (!this.innerPath.equals(that.innerPath))
          return false;
      }

      boolean this_present_outerPath = true && this.isSetOuterPath();
      boolean that_present_outerPath = true && that.isSetOuterPath();
      if (this_present_outerPath || that_present_outerPath) {
        if (!(this_present_outerPath && that_present_outerPath))
          return false;
        if (!this.outerPath.equals(that.outerPath))
          return false;
      }

      boolean this_present_addBy = true && this.isSetAddBy();
      boolean that_present_addBy = true && that.isSetAddBy();
      if (this_present_addBy || that_present_addBy) {
        if (!(this_present_addBy && that_present_addBy))
          return false;
        if (!this.addBy.equals(that.addBy))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(boxId);

      hashCode = hashCode * 8191 + ((isSetInnerPath()) ? 131071 : 524287);
      if (isSetInnerPath())
        hashCode = hashCode * 8191 + innerPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetOuterPath()) ? 131071 : 524287);
      if (isSetOuterPath())
        hashCode = hashCode * 8191 + outerPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetAddBy()) ? 131071 : 524287);
      if (isSetAddBy())
        hashCode = hashCode * 8191 + addBy.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(add_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBoxId()).compareTo(other.isSetBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boxId, other.boxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInnerPath()).compareTo(other.isSetInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerPath, other.innerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOuterPath()).compareTo(other.isSetOuterPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuterPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outerPath, other.outerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAddBy()).compareTo(other.isSetAddBy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddBy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addBy, other.addBy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("add_args(");
      boolean first = true;

      sb.append("boxId:");
      sb.append(this.boxId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("innerPath:");
      if (this.innerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.innerPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outerPath:");
      if (this.outerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outerPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("addBy:");
      if (this.addBy == null) {
        sb.append("null");
      } else {
        sb.append(this.addBy);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public add_argsStandardScheme getScheme() {
        return new add_argsStandardScheme();
      }
    }

    private static class add_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<add_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.boxId = iprot.readI64();
                struct.setBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.innerPath = iprot.readString();
                struct.setInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outerPath = iprot.readString();
                struct.setOuterPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ADD_BY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.addBy = cn.zumium.boxes.thrift.AddBy.findByValue(iprot.readI32());
                struct.setAddByIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.boxId);
        oprot.writeFieldEnd();
        if (struct.innerPath != null) {
          oprot.writeFieldBegin(INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.innerPath);
          oprot.writeFieldEnd();
        }
        if (struct.outerPath != null) {
          oprot.writeFieldBegin(OUTER_PATH_FIELD_DESC);
          oprot.writeString(struct.outerPath);
          oprot.writeFieldEnd();
        }
        if (struct.addBy != null) {
          oprot.writeFieldBegin(ADD_BY_FIELD_DESC);
          oprot.writeI32(struct.addBy.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public add_argsTupleScheme getScheme() {
        return new add_argsTupleScheme();
      }
    }

    private static class add_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<add_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBoxId()) {
          optionals.set(0);
        }
        if (struct.isSetInnerPath()) {
          optionals.set(1);
        }
        if (struct.isSetOuterPath()) {
          optionals.set(2);
        }
        if (struct.isSetAddBy()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBoxId()) {
          oprot.writeI64(struct.boxId);
        }
        if (struct.isSetInnerPath()) {
          oprot.writeString(struct.innerPath);
        }
        if (struct.isSetOuterPath()) {
          oprot.writeString(struct.outerPath);
        }
        if (struct.isSetAddBy()) {
          oprot.writeI32(struct.addBy.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.boxId = iprot.readI64();
          struct.setBoxIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.innerPath = iprot.readString();
          struct.setInnerPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outerPath = iprot.readString();
          struct.setOuterPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.addBy = cn.zumium.boxes.thrift.AddBy.findByValue(iprot.readI32());
          struct.setAddByIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class add_result implements org.apache.thrift.TBase<add_result, add_result._Fields>, java.io.Serializable, Cloneable, Comparable<add_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("add_result");

    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new add_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new add_resultTupleSchemeFactory();

    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(add_result.class, metaDataMap);
    }

    public add_result() {
    }

    public add_result(
      ServiceException excp)
    {
      this();
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public add_result(add_result other) {
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public add_result deepCopy() {
      return new add_result(this);
    }

    @Override
    public void clear() {
      this.excp = null;
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public add_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof add_result)
        return this.equals((add_result)that);
      return false;
    }

    public boolean equals(add_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(add_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("add_result(");
      boolean first = true;

      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class add_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public add_resultStandardScheme getScheme() {
        return new add_resultStandardScheme();
      }
    }

    private static class add_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<add_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, add_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, add_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class add_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public add_resultTupleScheme getScheme() {
        return new add_resultTupleScheme();
      }
    }

    private static class add_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<add_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, add_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExcp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, add_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetch_args implements org.apache.thrift.TBase<fetch_args, fetch_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetch_args");

    private static final org.apache.thrift.protocol.TField BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boxId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("innerPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUTER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outerPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FETCH_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchBy", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetch_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetch_argsTupleSchemeFactory();

    public long boxId; // required
    public java.lang.String innerPath; // required
    public java.lang.String outerPath; // required
    /**
     * 
     * @see FetchBy
     */
    public FetchBy fetchBy; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOX_ID((short)1, "boxId"),
      INNER_PATH((short)2, "innerPath"),
      OUTER_PATH((short)3, "outerPath"),
      /**
       * 
       * @see FetchBy
       */
      FETCH_BY((short)4, "fetchBy");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOX_ID
            return BOX_ID;
          case 2: // INNER_PATH
            return INNER_PATH;
          case 3: // OUTER_PATH
            return OUTER_PATH;
          case 4: // FETCH_BY
            return FETCH_BY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BOXID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("boxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("innerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTER_PATH, new org.apache.thrift.meta_data.FieldMetaData("outerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FETCH_BY, new org.apache.thrift.meta_data.FieldMetaData("fetchBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FetchBy.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetch_args.class, metaDataMap);
    }

    public fetch_args() {
    }

    public fetch_args(
      long boxId,
      java.lang.String innerPath,
      java.lang.String outerPath,
      FetchBy fetchBy)
    {
      this();
      this.boxId = boxId;
      setBoxIdIsSet(true);
      this.innerPath = innerPath;
      this.outerPath = outerPath;
      this.fetchBy = fetchBy;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetch_args(fetch_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.boxId = other.boxId;
      if (other.isSetInnerPath()) {
        this.innerPath = other.innerPath;
      }
      if (other.isSetOuterPath()) {
        this.outerPath = other.outerPath;
      }
      if (other.isSetFetchBy()) {
        this.fetchBy = other.fetchBy;
      }
    }

    public fetch_args deepCopy() {
      return new fetch_args(this);
    }

    @Override
    public void clear() {
      setBoxIdIsSet(false);
      this.boxId = 0;
      this.innerPath = null;
      this.outerPath = null;
      this.fetchBy = null;
    }

    public long getBoxId() {
      return this.boxId;
    }

    public fetch_args setBoxId(long boxId) {
      this.boxId = boxId;
      setBoxIdIsSet(true);
      return this;
    }

    public void unsetBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    /** Returns true if field boxId is set (has been assigned a value) and false otherwise */
    public boolean isSetBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    public void setBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOXID_ISSET_ID, value);
    }

    public java.lang.String getInnerPath() {
      return this.innerPath;
    }

    public fetch_args setInnerPath(java.lang.String innerPath) {
      this.innerPath = innerPath;
      return this;
    }

    public void unsetInnerPath() {
      this.innerPath = null;
    }

    /** Returns true if field innerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInnerPath() {
      return this.innerPath != null;
    }

    public void setInnerPathIsSet(boolean value) {
      if (!value) {
        this.innerPath = null;
      }
    }

    public java.lang.String getOuterPath() {
      return this.outerPath;
    }

    public fetch_args setOuterPath(java.lang.String outerPath) {
      this.outerPath = outerPath;
      return this;
    }

    public void unsetOuterPath() {
      this.outerPath = null;
    }

    /** Returns true if field outerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOuterPath() {
      return this.outerPath != null;
    }

    public void setOuterPathIsSet(boolean value) {
      if (!value) {
        this.outerPath = null;
      }
    }

    /**
     * 
     * @see FetchBy
     */
    public FetchBy getFetchBy() {
      return this.fetchBy;
    }

    /**
     * 
     * @see FetchBy
     */
    public fetch_args setFetchBy(FetchBy fetchBy) {
      this.fetchBy = fetchBy;
      return this;
    }

    public void unsetFetchBy() {
      this.fetchBy = null;
    }

    /** Returns true if field fetchBy is set (has been assigned a value) and false otherwise */
    public boolean isSetFetchBy() {
      return this.fetchBy != null;
    }

    public void setFetchByIsSet(boolean value) {
      if (!value) {
        this.fetchBy = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOX_ID:
        if (value == null) {
          unsetBoxId();
        } else {
          setBoxId((java.lang.Long)value);
        }
        break;

      case INNER_PATH:
        if (value == null) {
          unsetInnerPath();
        } else {
          setInnerPath((java.lang.String)value);
        }
        break;

      case OUTER_PATH:
        if (value == null) {
          unsetOuterPath();
        } else {
          setOuterPath((java.lang.String)value);
        }
        break;

      case FETCH_BY:
        if (value == null) {
          unsetFetchBy();
        } else {
          setFetchBy((FetchBy)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOX_ID:
        return getBoxId();

      case INNER_PATH:
        return getInnerPath();

      case OUTER_PATH:
        return getOuterPath();

      case FETCH_BY:
        return getFetchBy();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOX_ID:
        return isSetBoxId();
      case INNER_PATH:
        return isSetInnerPath();
      case OUTER_PATH:
        return isSetOuterPath();
      case FETCH_BY:
        return isSetFetchBy();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_args)
        return this.equals((fetch_args)that);
      return false;
    }

    public boolean equals(fetch_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_boxId = true;
      boolean that_present_boxId = true;
      if (this_present_boxId || that_present_boxId) {
        if (!(this_present_boxId && that_present_boxId))
          return false;
        if (this.boxId != that.boxId)
          return false;
      }

      boolean this_present_innerPath = true && this.isSetInnerPath();
      boolean that_present_innerPath = true && that.isSetInnerPath();
      if (this_present_innerPath || that_present_innerPath) {
        if (!(this_present_innerPath && that_present_innerPath))
          return false;
        if (!this.innerPath.equals(that.innerPath))
          return false;
      }

      boolean this_present_outerPath = true && this.isSetOuterPath();
      boolean that_present_outerPath = true && that.isSetOuterPath();
      if (this_present_outerPath || that_present_outerPath) {
        if (!(this_present_outerPath && that_present_outerPath))
          return false;
        if (!this.outerPath.equals(that.outerPath))
          return false;
      }

      boolean this_present_fetchBy = true && this.isSetFetchBy();
      boolean that_present_fetchBy = true && that.isSetFetchBy();
      if (this_present_fetchBy || that_present_fetchBy) {
        if (!(this_present_fetchBy && that_present_fetchBy))
          return false;
        if (!this.fetchBy.equals(that.fetchBy))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(boxId);

      hashCode = hashCode * 8191 + ((isSetInnerPath()) ? 131071 : 524287);
      if (isSetInnerPath())
        hashCode = hashCode * 8191 + innerPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetOuterPath()) ? 131071 : 524287);
      if (isSetOuterPath())
        hashCode = hashCode * 8191 + outerPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetFetchBy()) ? 131071 : 524287);
      if (isSetFetchBy())
        hashCode = hashCode * 8191 + fetchBy.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(fetch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBoxId()).compareTo(other.isSetBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boxId, other.boxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInnerPath()).compareTo(other.isSetInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerPath, other.innerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOuterPath()).compareTo(other.isSetOuterPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuterPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outerPath, other.outerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFetchBy()).compareTo(other.isSetFetchBy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFetchBy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchBy, other.fetchBy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetch_args(");
      boolean first = true;

      sb.append("boxId:");
      sb.append(this.boxId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("innerPath:");
      if (this.innerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.innerPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outerPath:");
      if (this.outerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outerPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fetchBy:");
      if (this.fetchBy == null) {
        sb.append("null");
      } else {
        sb.append(this.fetchBy);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetch_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetch_argsStandardScheme getScheme() {
        return new fetch_argsStandardScheme();
      }
    }

    private static class fetch_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.boxId = iprot.readI64();
                struct.setBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.innerPath = iprot.readString();
                struct.setInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outerPath = iprot.readString();
                struct.setOuterPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FETCH_BY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fetchBy = cn.zumium.boxes.thrift.FetchBy.findByValue(iprot.readI32());
                struct.setFetchByIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.boxId);
        oprot.writeFieldEnd();
        if (struct.innerPath != null) {
          oprot.writeFieldBegin(INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.innerPath);
          oprot.writeFieldEnd();
        }
        if (struct.outerPath != null) {
          oprot.writeFieldBegin(OUTER_PATH_FIELD_DESC);
          oprot.writeString(struct.outerPath);
          oprot.writeFieldEnd();
        }
        if (struct.fetchBy != null) {
          oprot.writeFieldBegin(FETCH_BY_FIELD_DESC);
          oprot.writeI32(struct.fetchBy.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetch_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetch_argsTupleScheme getScheme() {
        return new fetch_argsTupleScheme();
      }
    }

    private static class fetch_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBoxId()) {
          optionals.set(0);
        }
        if (struct.isSetInnerPath()) {
          optionals.set(1);
        }
        if (struct.isSetOuterPath()) {
          optionals.set(2);
        }
        if (struct.isSetFetchBy()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBoxId()) {
          oprot.writeI64(struct.boxId);
        }
        if (struct.isSetInnerPath()) {
          oprot.writeString(struct.innerPath);
        }
        if (struct.isSetOuterPath()) {
          oprot.writeString(struct.outerPath);
        }
        if (struct.isSetFetchBy()) {
          oprot.writeI32(struct.fetchBy.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.boxId = iprot.readI64();
          struct.setBoxIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.innerPath = iprot.readString();
          struct.setInnerPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outerPath = iprot.readString();
          struct.setOuterPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.fetchBy = cn.zumium.boxes.thrift.FetchBy.findByValue(iprot.readI32());
          struct.setFetchByIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetch_result implements org.apache.thrift.TBase<fetch_result, fetch_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetch_result");

    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetch_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetch_resultTupleSchemeFactory();

    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetch_result.class, metaDataMap);
    }

    public fetch_result() {
    }

    public fetch_result(
      ServiceException excp)
    {
      this();
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetch_result(fetch_result other) {
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public fetch_result deepCopy() {
      return new fetch_result(this);
    }

    @Override
    public void clear() {
      this.excp = null;
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public fetch_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetch_result)
        return this.equals((fetch_result)that);
      return false;
    }

    public boolean equals(fetch_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetch_result(");
      boolean first = true;

      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetch_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetch_resultStandardScheme getScheme() {
        return new fetch_resultStandardScheme();
      }
    }

    private static class fetch_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetch_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetch_resultTupleScheme getScheme() {
        return new fetch_resultTupleScheme();
      }
    }

    private static class fetch_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExcp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class remove_args implements org.apache.thrift.TBase<remove_args, remove_args._Fields>, java.io.Serializable, Cloneable, Comparable<remove_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_args");

    private static final org.apache.thrift.protocol.TField BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boxId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("innerPath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new remove_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new remove_argsTupleSchemeFactory();

    public long boxId; // required
    public java.lang.String innerPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOX_ID((short)1, "boxId"),
      INNER_PATH((short)2, "innerPath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOX_ID
            return BOX_ID;
          case 2: // INNER_PATH
            return INNER_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BOXID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("boxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("innerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_args.class, metaDataMap);
    }

    public remove_args() {
    }

    public remove_args(
      long boxId,
      java.lang.String innerPath)
    {
      this();
      this.boxId = boxId;
      setBoxIdIsSet(true);
      this.innerPath = innerPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remove_args(remove_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.boxId = other.boxId;
      if (other.isSetInnerPath()) {
        this.innerPath = other.innerPath;
      }
    }

    public remove_args deepCopy() {
      return new remove_args(this);
    }

    @Override
    public void clear() {
      setBoxIdIsSet(false);
      this.boxId = 0;
      this.innerPath = null;
    }

    public long getBoxId() {
      return this.boxId;
    }

    public remove_args setBoxId(long boxId) {
      this.boxId = boxId;
      setBoxIdIsSet(true);
      return this;
    }

    public void unsetBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    /** Returns true if field boxId is set (has been assigned a value) and false otherwise */
    public boolean isSetBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    public void setBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOXID_ISSET_ID, value);
    }

    public java.lang.String getInnerPath() {
      return this.innerPath;
    }

    public remove_args setInnerPath(java.lang.String innerPath) {
      this.innerPath = innerPath;
      return this;
    }

    public void unsetInnerPath() {
      this.innerPath = null;
    }

    /** Returns true if field innerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInnerPath() {
      return this.innerPath != null;
    }

    public void setInnerPathIsSet(boolean value) {
      if (!value) {
        this.innerPath = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOX_ID:
        if (value == null) {
          unsetBoxId();
        } else {
          setBoxId((java.lang.Long)value);
        }
        break;

      case INNER_PATH:
        if (value == null) {
          unsetInnerPath();
        } else {
          setInnerPath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOX_ID:
        return getBoxId();

      case INNER_PATH:
        return getInnerPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOX_ID:
        return isSetBoxId();
      case INNER_PATH:
        return isSetInnerPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_args)
        return this.equals((remove_args)that);
      return false;
    }

    public boolean equals(remove_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_boxId = true;
      boolean that_present_boxId = true;
      if (this_present_boxId || that_present_boxId) {
        if (!(this_present_boxId && that_present_boxId))
          return false;
        if (this.boxId != that.boxId)
          return false;
      }

      boolean this_present_innerPath = true && this.isSetInnerPath();
      boolean that_present_innerPath = true && that.isSetInnerPath();
      if (this_present_innerPath || that_present_innerPath) {
        if (!(this_present_innerPath && that_present_innerPath))
          return false;
        if (!this.innerPath.equals(that.innerPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(boxId);

      hashCode = hashCode * 8191 + ((isSetInnerPath()) ? 131071 : 524287);
      if (isSetInnerPath())
        hashCode = hashCode * 8191 + innerPath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(remove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBoxId()).compareTo(other.isSetBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boxId, other.boxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInnerPath()).compareTo(other.isSetInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerPath, other.innerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("remove_args(");
      boolean first = true;

      sb.append("boxId:");
      sb.append(this.boxId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("innerPath:");
      if (this.innerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.innerPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remove_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public remove_argsStandardScheme getScheme() {
        return new remove_argsStandardScheme();
      }
    }

    private static class remove_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<remove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.boxId = iprot.readI64();
                struct.setBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.innerPath = iprot.readString();
                struct.setInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.boxId);
        oprot.writeFieldEnd();
        if (struct.innerPath != null) {
          oprot.writeFieldBegin(INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.innerPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remove_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public remove_argsTupleScheme getScheme() {
        return new remove_argsTupleScheme();
      }
    }

    private static class remove_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<remove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBoxId()) {
          optionals.set(0);
        }
        if (struct.isSetInnerPath()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBoxId()) {
          oprot.writeI64(struct.boxId);
        }
        if (struct.isSetInnerPath()) {
          oprot.writeString(struct.innerPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.boxId = iprot.readI64();
          struct.setBoxIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.innerPath = iprot.readString();
          struct.setInnerPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class remove_result implements org.apache.thrift.TBase<remove_result, remove_result._Fields>, java.io.Serializable, Cloneable, Comparable<remove_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_result");

    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new remove_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new remove_resultTupleSchemeFactory();

    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_result.class, metaDataMap);
    }

    public remove_result() {
    }

    public remove_result(
      ServiceException excp)
    {
      this();
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remove_result(remove_result other) {
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public remove_result deepCopy() {
      return new remove_result(this);
    }

    @Override
    public void clear() {
      this.excp = null;
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public remove_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_result)
        return this.equals((remove_result)that);
      return false;
    }

    public boolean equals(remove_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(remove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("remove_result(");
      boolean first = true;

      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remove_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public remove_resultStandardScheme getScheme() {
        return new remove_resultStandardScheme();
      }
    }

    private static class remove_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<remove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remove_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public remove_resultTupleScheme getScheme() {
        return new remove_resultTupleScheme();
      }
    }

    private static class remove_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<remove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExcp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ls_args implements org.apache.thrift.TBase<ls_args, ls_args._Fields>, java.io.Serializable, Cloneable, Comparable<ls_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ls_args");

    private static final org.apache.thrift.protocol.TField BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boxId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField INNER_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("innerDir", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ls_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ls_argsTupleSchemeFactory();

    public long boxId; // required
    public java.lang.String innerDir; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOX_ID((short)1, "boxId"),
      INNER_DIR((short)2, "innerDir");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOX_ID
            return BOX_ID;
          case 2: // INNER_DIR
            return INNER_DIR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BOXID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("boxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.INNER_DIR, new org.apache.thrift.meta_data.FieldMetaData("innerDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ls_args.class, metaDataMap);
    }

    public ls_args() {
    }

    public ls_args(
      long boxId,
      java.lang.String innerDir)
    {
      this();
      this.boxId = boxId;
      setBoxIdIsSet(true);
      this.innerDir = innerDir;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ls_args(ls_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.boxId = other.boxId;
      if (other.isSetInnerDir()) {
        this.innerDir = other.innerDir;
      }
    }

    public ls_args deepCopy() {
      return new ls_args(this);
    }

    @Override
    public void clear() {
      setBoxIdIsSet(false);
      this.boxId = 0;
      this.innerDir = null;
    }

    public long getBoxId() {
      return this.boxId;
    }

    public ls_args setBoxId(long boxId) {
      this.boxId = boxId;
      setBoxIdIsSet(true);
      return this;
    }

    public void unsetBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    /** Returns true if field boxId is set (has been assigned a value) and false otherwise */
    public boolean isSetBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    public void setBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOXID_ISSET_ID, value);
    }

    public java.lang.String getInnerDir() {
      return this.innerDir;
    }

    public ls_args setInnerDir(java.lang.String innerDir) {
      this.innerDir = innerDir;
      return this;
    }

    public void unsetInnerDir() {
      this.innerDir = null;
    }

    /** Returns true if field innerDir is set (has been assigned a value) and false otherwise */
    public boolean isSetInnerDir() {
      return this.innerDir != null;
    }

    public void setInnerDirIsSet(boolean value) {
      if (!value) {
        this.innerDir = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOX_ID:
        if (value == null) {
          unsetBoxId();
        } else {
          setBoxId((java.lang.Long)value);
        }
        break;

      case INNER_DIR:
        if (value == null) {
          unsetInnerDir();
        } else {
          setInnerDir((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOX_ID:
        return getBoxId();

      case INNER_DIR:
        return getInnerDir();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOX_ID:
        return isSetBoxId();
      case INNER_DIR:
        return isSetInnerDir();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ls_args)
        return this.equals((ls_args)that);
      return false;
    }

    public boolean equals(ls_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_boxId = true;
      boolean that_present_boxId = true;
      if (this_present_boxId || that_present_boxId) {
        if (!(this_present_boxId && that_present_boxId))
          return false;
        if (this.boxId != that.boxId)
          return false;
      }

      boolean this_present_innerDir = true && this.isSetInnerDir();
      boolean that_present_innerDir = true && that.isSetInnerDir();
      if (this_present_innerDir || that_present_innerDir) {
        if (!(this_present_innerDir && that_present_innerDir))
          return false;
        if (!this.innerDir.equals(that.innerDir))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(boxId);

      hashCode = hashCode * 8191 + ((isSetInnerDir()) ? 131071 : 524287);
      if (isSetInnerDir())
        hashCode = hashCode * 8191 + innerDir.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ls_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBoxId()).compareTo(other.isSetBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boxId, other.boxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInnerDir()).compareTo(other.isSetInnerDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInnerDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerDir, other.innerDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ls_args(");
      boolean first = true;

      sb.append("boxId:");
      sb.append(this.boxId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("innerDir:");
      if (this.innerDir == null) {
        sb.append("null");
      } else {
        sb.append(this.innerDir);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ls_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ls_argsStandardScheme getScheme() {
        return new ls_argsStandardScheme();
      }
    }

    private static class ls_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ls_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ls_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.boxId = iprot.readI64();
                struct.setBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INNER_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.innerDir = iprot.readString();
                struct.setInnerDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ls_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.boxId);
        oprot.writeFieldEnd();
        if (struct.innerDir != null) {
          oprot.writeFieldBegin(INNER_DIR_FIELD_DESC);
          oprot.writeString(struct.innerDir);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ls_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ls_argsTupleScheme getScheme() {
        return new ls_argsTupleScheme();
      }
    }

    private static class ls_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ls_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ls_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBoxId()) {
          optionals.set(0);
        }
        if (struct.isSetInnerDir()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBoxId()) {
          oprot.writeI64(struct.boxId);
        }
        if (struct.isSetInnerDir()) {
          oprot.writeString(struct.innerDir);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ls_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.boxId = iprot.readI64();
          struct.setBoxIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.innerDir = iprot.readString();
          struct.setInnerDirIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ls_result implements org.apache.thrift.TBase<ls_result, ls_result._Fields>, java.io.Serializable, Cloneable, Comparable<ls_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ls_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ls_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ls_resultTupleSchemeFactory();

    public java.util.List<LsItem> success; // required
    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LsItem.class))));
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ls_result.class, metaDataMap);
    }

    public ls_result() {
    }

    public ls_result(
      java.util.List<LsItem> success,
      ServiceException excp)
    {
      this();
      this.success = success;
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ls_result(ls_result other) {
      if (other.isSetSuccess()) {
        java.util.List<LsItem> __this__success = new java.util.ArrayList<LsItem>(other.success.size());
        for (LsItem other_element : other.success) {
          __this__success.add(new LsItem(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public ls_result deepCopy() {
      return new ls_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.excp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LsItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LsItem elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<LsItem>();
      }
      this.success.add(elem);
    }

    public java.util.List<LsItem> getSuccess() {
      return this.success;
    }

    public ls_result setSuccess(java.util.List<LsItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public ls_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<LsItem>)value);
        }
        break;

      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ls_result)
        return this.equals((ls_result)that);
      return false;
    }

    public boolean equals(ls_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ls_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ls_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ls_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ls_resultStandardScheme getScheme() {
        return new ls_resultStandardScheme();
      }
    }

    private static class ls_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ls_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ls_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<LsItem>(_list8.size);
                  LsItem _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new LsItem();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ls_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (LsItem _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ls_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ls_resultTupleScheme getScheme() {
        return new ls_resultTupleScheme();
      }
    }

    private static class ls_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ls_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ls_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExcp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (LsItem _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ls_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<LsItem>(_list13.size);
            LsItem _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new LsItem();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class move_args implements org.apache.thrift.TBase<move_args, move_args._Fields>, java.io.Serializable, Cloneable, Comparable<move_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("move_args");

    private static final org.apache.thrift.protocol.TField SRC_BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcBoxId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SRC_INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("srcInnerPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DST_BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dstBoxId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField DST_INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("dstInnerPath", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new move_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new move_argsTupleSchemeFactory();

    public long srcBoxId; // required
    public java.lang.String srcInnerPath; // required
    public long dstBoxId; // required
    public java.lang.String dstInnerPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC_BOX_ID((short)1, "srcBoxId"),
      SRC_INNER_PATH((short)2, "srcInnerPath"),
      DST_BOX_ID((short)3, "dstBoxId"),
      DST_INNER_PATH((short)4, "dstInnerPath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC_BOX_ID
            return SRC_BOX_ID;
          case 2: // SRC_INNER_PATH
            return SRC_INNER_PATH;
          case 3: // DST_BOX_ID
            return DST_BOX_ID;
          case 4: // DST_INNER_PATH
            return DST_INNER_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SRCBOXID_ISSET_ID = 0;
    private static final int __DSTBOXID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC_BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("srcBoxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SRC_INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("srcInnerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("dstBoxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DST_INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("dstInnerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(move_args.class, metaDataMap);
    }

    public move_args() {
    }

    public move_args(
      long srcBoxId,
      java.lang.String srcInnerPath,
      long dstBoxId,
      java.lang.String dstInnerPath)
    {
      this();
      this.srcBoxId = srcBoxId;
      setSrcBoxIdIsSet(true);
      this.srcInnerPath = srcInnerPath;
      this.dstBoxId = dstBoxId;
      setDstBoxIdIsSet(true);
      this.dstInnerPath = dstInnerPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public move_args(move_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.srcBoxId = other.srcBoxId;
      if (other.isSetSrcInnerPath()) {
        this.srcInnerPath = other.srcInnerPath;
      }
      this.dstBoxId = other.dstBoxId;
      if (other.isSetDstInnerPath()) {
        this.dstInnerPath = other.dstInnerPath;
      }
    }

    public move_args deepCopy() {
      return new move_args(this);
    }

    @Override
    public void clear() {
      setSrcBoxIdIsSet(false);
      this.srcBoxId = 0;
      this.srcInnerPath = null;
      setDstBoxIdIsSet(false);
      this.dstBoxId = 0;
      this.dstInnerPath = null;
    }

    public long getSrcBoxId() {
      return this.srcBoxId;
    }

    public move_args setSrcBoxId(long srcBoxId) {
      this.srcBoxId = srcBoxId;
      setSrcBoxIdIsSet(true);
      return this;
    }

    public void unsetSrcBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRCBOXID_ISSET_ID);
    }

    /** Returns true if field srcBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRCBOXID_ISSET_ID);
    }

    public void setSrcBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRCBOXID_ISSET_ID, value);
    }

    public java.lang.String getSrcInnerPath() {
      return this.srcInnerPath;
    }

    public move_args setSrcInnerPath(java.lang.String srcInnerPath) {
      this.srcInnerPath = srcInnerPath;
      return this;
    }

    public void unsetSrcInnerPath() {
      this.srcInnerPath = null;
    }

    /** Returns true if field srcInnerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcInnerPath() {
      return this.srcInnerPath != null;
    }

    public void setSrcInnerPathIsSet(boolean value) {
      if (!value) {
        this.srcInnerPath = null;
      }
    }

    public long getDstBoxId() {
      return this.dstBoxId;
    }

    public move_args setDstBoxId(long dstBoxId) {
      this.dstBoxId = dstBoxId;
      setDstBoxIdIsSet(true);
      return this;
    }

    public void unsetDstBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DSTBOXID_ISSET_ID);
    }

    /** Returns true if field dstBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetDstBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DSTBOXID_ISSET_ID);
    }

    public void setDstBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DSTBOXID_ISSET_ID, value);
    }

    public java.lang.String getDstInnerPath() {
      return this.dstInnerPath;
    }

    public move_args setDstInnerPath(java.lang.String dstInnerPath) {
      this.dstInnerPath = dstInnerPath;
      return this;
    }

    public void unsetDstInnerPath() {
      this.dstInnerPath = null;
    }

    /** Returns true if field dstInnerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDstInnerPath() {
      return this.dstInnerPath != null;
    }

    public void setDstInnerPathIsSet(boolean value) {
      if (!value) {
        this.dstInnerPath = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SRC_BOX_ID:
        if (value == null) {
          unsetSrcBoxId();
        } else {
          setSrcBoxId((java.lang.Long)value);
        }
        break;

      case SRC_INNER_PATH:
        if (value == null) {
          unsetSrcInnerPath();
        } else {
          setSrcInnerPath((java.lang.String)value);
        }
        break;

      case DST_BOX_ID:
        if (value == null) {
          unsetDstBoxId();
        } else {
          setDstBoxId((java.lang.Long)value);
        }
        break;

      case DST_INNER_PATH:
        if (value == null) {
          unsetDstInnerPath();
        } else {
          setDstInnerPath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC_BOX_ID:
        return getSrcBoxId();

      case SRC_INNER_PATH:
        return getSrcInnerPath();

      case DST_BOX_ID:
        return getDstBoxId();

      case DST_INNER_PATH:
        return getDstInnerPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC_BOX_ID:
        return isSetSrcBoxId();
      case SRC_INNER_PATH:
        return isSetSrcInnerPath();
      case DST_BOX_ID:
        return isSetDstBoxId();
      case DST_INNER_PATH:
        return isSetDstInnerPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof move_args)
        return this.equals((move_args)that);
      return false;
    }

    public boolean equals(move_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_srcBoxId = true;
      boolean that_present_srcBoxId = true;
      if (this_present_srcBoxId || that_present_srcBoxId) {
        if (!(this_present_srcBoxId && that_present_srcBoxId))
          return false;
        if (this.srcBoxId != that.srcBoxId)
          return false;
      }

      boolean this_present_srcInnerPath = true && this.isSetSrcInnerPath();
      boolean that_present_srcInnerPath = true && that.isSetSrcInnerPath();
      if (this_present_srcInnerPath || that_present_srcInnerPath) {
        if (!(this_present_srcInnerPath && that_present_srcInnerPath))
          return false;
        if (!this.srcInnerPath.equals(that.srcInnerPath))
          return false;
      }

      boolean this_present_dstBoxId = true;
      boolean that_present_dstBoxId = true;
      if (this_present_dstBoxId || that_present_dstBoxId) {
        if (!(this_present_dstBoxId && that_present_dstBoxId))
          return false;
        if (this.dstBoxId != that.dstBoxId)
          return false;
      }

      boolean this_present_dstInnerPath = true && this.isSetDstInnerPath();
      boolean that_present_dstInnerPath = true && that.isSetDstInnerPath();
      if (this_present_dstInnerPath || that_present_dstInnerPath) {
        if (!(this_present_dstInnerPath && that_present_dstInnerPath))
          return false;
        if (!this.dstInnerPath.equals(that.dstInnerPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(srcBoxId);

      hashCode = hashCode * 8191 + ((isSetSrcInnerPath()) ? 131071 : 524287);
      if (isSetSrcInnerPath())
        hashCode = hashCode * 8191 + srcInnerPath.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dstBoxId);

      hashCode = hashCode * 8191 + ((isSetDstInnerPath()) ? 131071 : 524287);
      if (isSetDstInnerPath())
        hashCode = hashCode * 8191 + dstInnerPath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(move_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrcBoxId()).compareTo(other.isSetSrcBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcBoxId, other.srcBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSrcInnerPath()).compareTo(other.isSetSrcInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcInnerPath, other.srcInnerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDstBoxId()).compareTo(other.isSetDstBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstBoxId, other.dstBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDstInnerPath()).compareTo(other.isSetDstInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstInnerPath, other.dstInnerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("move_args(");
      boolean first = true;

      sb.append("srcBoxId:");
      sb.append(this.srcBoxId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcInnerPath:");
      if (this.srcInnerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.srcInnerPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstBoxId:");
      sb.append(this.dstBoxId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstInnerPath:");
      if (this.dstInnerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.dstInnerPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class move_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public move_argsStandardScheme getScheme() {
        return new move_argsStandardScheme();
      }
    }

    private static class move_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<move_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, move_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC_BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.srcBoxId = iprot.readI64();
                struct.setSrcBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRC_INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcInnerPath = iprot.readString();
                struct.setSrcInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DST_BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dstBoxId = iprot.readI64();
                struct.setDstBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DST_INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstInnerPath = iprot.readString();
                struct.setDstInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, move_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SRC_BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.srcBoxId);
        oprot.writeFieldEnd();
        if (struct.srcInnerPath != null) {
          oprot.writeFieldBegin(SRC_INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.srcInnerPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DST_BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.dstBoxId);
        oprot.writeFieldEnd();
        if (struct.dstInnerPath != null) {
          oprot.writeFieldBegin(DST_INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.dstInnerPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class move_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public move_argsTupleScheme getScheme() {
        return new move_argsTupleScheme();
      }
    }

    private static class move_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<move_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, move_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrcBoxId()) {
          optionals.set(0);
        }
        if (struct.isSetSrcInnerPath()) {
          optionals.set(1);
        }
        if (struct.isSetDstBoxId()) {
          optionals.set(2);
        }
        if (struct.isSetDstInnerPath()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSrcBoxId()) {
          oprot.writeI64(struct.srcBoxId);
        }
        if (struct.isSetSrcInnerPath()) {
          oprot.writeString(struct.srcInnerPath);
        }
        if (struct.isSetDstBoxId()) {
          oprot.writeI64(struct.dstBoxId);
        }
        if (struct.isSetDstInnerPath()) {
          oprot.writeString(struct.dstInnerPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, move_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.srcBoxId = iprot.readI64();
          struct.setSrcBoxIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srcInnerPath = iprot.readString();
          struct.setSrcInnerPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dstBoxId = iprot.readI64();
          struct.setDstBoxIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dstInnerPath = iprot.readString();
          struct.setDstInnerPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class move_result implements org.apache.thrift.TBase<move_result, move_result._Fields>, java.io.Serializable, Cloneable, Comparable<move_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("move_result");

    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new move_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new move_resultTupleSchemeFactory();

    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(move_result.class, metaDataMap);
    }

    public move_result() {
    }

    public move_result(
      ServiceException excp)
    {
      this();
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public move_result(move_result other) {
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public move_result deepCopy() {
      return new move_result(this);
    }

    @Override
    public void clear() {
      this.excp = null;
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public move_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof move_result)
        return this.equals((move_result)that);
      return false;
    }

    public boolean equals(move_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(move_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("move_result(");
      boolean first = true;

      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class move_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public move_resultStandardScheme getScheme() {
        return new move_resultStandardScheme();
      }
    }

    private static class move_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<move_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, move_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, move_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class move_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public move_resultTupleScheme getScheme() {
        return new move_resultTupleScheme();
      }
    }

    private static class move_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<move_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, move_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExcp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, move_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class copy_args implements org.apache.thrift.TBase<copy_args, copy_args._Fields>, java.io.Serializable, Cloneable, Comparable<copy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("copy_args");

    private static final org.apache.thrift.protocol.TField SRC_BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcBoxId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SRC_INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("srcInnerPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DST_BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dstBoxId", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField DST_INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("dstInnerPath", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new copy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new copy_argsTupleSchemeFactory();

    public long srcBoxId; // required
    public java.lang.String srcInnerPath; // required
    public long dstBoxId; // required
    public java.lang.String dstInnerPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRC_BOX_ID((short)1, "srcBoxId"),
      SRC_INNER_PATH((short)2, "srcInnerPath"),
      DST_BOX_ID((short)3, "dstBoxId"),
      DST_INNER_PATH((short)4, "dstInnerPath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRC_BOX_ID
            return SRC_BOX_ID;
          case 2: // SRC_INNER_PATH
            return SRC_INNER_PATH;
          case 3: // DST_BOX_ID
            return DST_BOX_ID;
          case 4: // DST_INNER_PATH
            return DST_INNER_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SRCBOXID_ISSET_ID = 0;
    private static final int __DSTBOXID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRC_BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("srcBoxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SRC_INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("srcInnerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("dstBoxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DST_INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("dstInnerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(copy_args.class, metaDataMap);
    }

    public copy_args() {
    }

    public copy_args(
      long srcBoxId,
      java.lang.String srcInnerPath,
      long dstBoxId,
      java.lang.String dstInnerPath)
    {
      this();
      this.srcBoxId = srcBoxId;
      setSrcBoxIdIsSet(true);
      this.srcInnerPath = srcInnerPath;
      this.dstBoxId = dstBoxId;
      setDstBoxIdIsSet(true);
      this.dstInnerPath = dstInnerPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copy_args(copy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.srcBoxId = other.srcBoxId;
      if (other.isSetSrcInnerPath()) {
        this.srcInnerPath = other.srcInnerPath;
      }
      this.dstBoxId = other.dstBoxId;
      if (other.isSetDstInnerPath()) {
        this.dstInnerPath = other.dstInnerPath;
      }
    }

    public copy_args deepCopy() {
      return new copy_args(this);
    }

    @Override
    public void clear() {
      setSrcBoxIdIsSet(false);
      this.srcBoxId = 0;
      this.srcInnerPath = null;
      setDstBoxIdIsSet(false);
      this.dstBoxId = 0;
      this.dstInnerPath = null;
    }

    public long getSrcBoxId() {
      return this.srcBoxId;
    }

    public copy_args setSrcBoxId(long srcBoxId) {
      this.srcBoxId = srcBoxId;
      setSrcBoxIdIsSet(true);
      return this;
    }

    public void unsetSrcBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRCBOXID_ISSET_ID);
    }

    /** Returns true if field srcBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRCBOXID_ISSET_ID);
    }

    public void setSrcBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRCBOXID_ISSET_ID, value);
    }

    public java.lang.String getSrcInnerPath() {
      return this.srcInnerPath;
    }

    public copy_args setSrcInnerPath(java.lang.String srcInnerPath) {
      this.srcInnerPath = srcInnerPath;
      return this;
    }

    public void unsetSrcInnerPath() {
      this.srcInnerPath = null;
    }

    /** Returns true if field srcInnerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcInnerPath() {
      return this.srcInnerPath != null;
    }

    public void setSrcInnerPathIsSet(boolean value) {
      if (!value) {
        this.srcInnerPath = null;
      }
    }

    public long getDstBoxId() {
      return this.dstBoxId;
    }

    public copy_args setDstBoxId(long dstBoxId) {
      this.dstBoxId = dstBoxId;
      setDstBoxIdIsSet(true);
      return this;
    }

    public void unsetDstBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DSTBOXID_ISSET_ID);
    }

    /** Returns true if field dstBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetDstBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DSTBOXID_ISSET_ID);
    }

    public void setDstBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DSTBOXID_ISSET_ID, value);
    }

    public java.lang.String getDstInnerPath() {
      return this.dstInnerPath;
    }

    public copy_args setDstInnerPath(java.lang.String dstInnerPath) {
      this.dstInnerPath = dstInnerPath;
      return this;
    }

    public void unsetDstInnerPath() {
      this.dstInnerPath = null;
    }

    /** Returns true if field dstInnerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDstInnerPath() {
      return this.dstInnerPath != null;
    }

    public void setDstInnerPathIsSet(boolean value) {
      if (!value) {
        this.dstInnerPath = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SRC_BOX_ID:
        if (value == null) {
          unsetSrcBoxId();
        } else {
          setSrcBoxId((java.lang.Long)value);
        }
        break;

      case SRC_INNER_PATH:
        if (value == null) {
          unsetSrcInnerPath();
        } else {
          setSrcInnerPath((java.lang.String)value);
        }
        break;

      case DST_BOX_ID:
        if (value == null) {
          unsetDstBoxId();
        } else {
          setDstBoxId((java.lang.Long)value);
        }
        break;

      case DST_INNER_PATH:
        if (value == null) {
          unsetDstInnerPath();
        } else {
          setDstInnerPath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SRC_BOX_ID:
        return getSrcBoxId();

      case SRC_INNER_PATH:
        return getSrcInnerPath();

      case DST_BOX_ID:
        return getDstBoxId();

      case DST_INNER_PATH:
        return getDstInnerPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SRC_BOX_ID:
        return isSetSrcBoxId();
      case SRC_INNER_PATH:
        return isSetSrcInnerPath();
      case DST_BOX_ID:
        return isSetDstBoxId();
      case DST_INNER_PATH:
        return isSetDstInnerPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof copy_args)
        return this.equals((copy_args)that);
      return false;
    }

    public boolean equals(copy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_srcBoxId = true;
      boolean that_present_srcBoxId = true;
      if (this_present_srcBoxId || that_present_srcBoxId) {
        if (!(this_present_srcBoxId && that_present_srcBoxId))
          return false;
        if (this.srcBoxId != that.srcBoxId)
          return false;
      }

      boolean this_present_srcInnerPath = true && this.isSetSrcInnerPath();
      boolean that_present_srcInnerPath = true && that.isSetSrcInnerPath();
      if (this_present_srcInnerPath || that_present_srcInnerPath) {
        if (!(this_present_srcInnerPath && that_present_srcInnerPath))
          return false;
        if (!this.srcInnerPath.equals(that.srcInnerPath))
          return false;
      }

      boolean this_present_dstBoxId = true;
      boolean that_present_dstBoxId = true;
      if (this_present_dstBoxId || that_present_dstBoxId) {
        if (!(this_present_dstBoxId && that_present_dstBoxId))
          return false;
        if (this.dstBoxId != that.dstBoxId)
          return false;
      }

      boolean this_present_dstInnerPath = true && this.isSetDstInnerPath();
      boolean that_present_dstInnerPath = true && that.isSetDstInnerPath();
      if (this_present_dstInnerPath || that_present_dstInnerPath) {
        if (!(this_present_dstInnerPath && that_present_dstInnerPath))
          return false;
        if (!this.dstInnerPath.equals(that.dstInnerPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(srcBoxId);

      hashCode = hashCode * 8191 + ((isSetSrcInnerPath()) ? 131071 : 524287);
      if (isSetSrcInnerPath())
        hashCode = hashCode * 8191 + srcInnerPath.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dstBoxId);

      hashCode = hashCode * 8191 + ((isSetDstInnerPath()) ? 131071 : 524287);
      if (isSetDstInnerPath())
        hashCode = hashCode * 8191 + dstInnerPath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(copy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSrcBoxId()).compareTo(other.isSetSrcBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcBoxId, other.srcBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSrcInnerPath()).compareTo(other.isSetSrcInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcInnerPath, other.srcInnerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDstBoxId()).compareTo(other.isSetDstBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstBoxId, other.dstBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDstInnerPath()).compareTo(other.isSetDstInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstInnerPath, other.dstInnerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("copy_args(");
      boolean first = true;

      sb.append("srcBoxId:");
      sb.append(this.srcBoxId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcInnerPath:");
      if (this.srcInnerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.srcInnerPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstBoxId:");
      sb.append(this.dstBoxId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstInnerPath:");
      if (this.dstInnerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.dstInnerPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class copy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public copy_argsStandardScheme getScheme() {
        return new copy_argsStandardScheme();
      }
    }

    private static class copy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<copy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, copy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRC_BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.srcBoxId = iprot.readI64();
                struct.setSrcBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRC_INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcInnerPath = iprot.readString();
                struct.setSrcInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DST_BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dstBoxId = iprot.readI64();
                struct.setDstBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DST_INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstInnerPath = iprot.readString();
                struct.setDstInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, copy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SRC_BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.srcBoxId);
        oprot.writeFieldEnd();
        if (struct.srcInnerPath != null) {
          oprot.writeFieldBegin(SRC_INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.srcInnerPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DST_BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.dstBoxId);
        oprot.writeFieldEnd();
        if (struct.dstInnerPath != null) {
          oprot.writeFieldBegin(DST_INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.dstInnerPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class copy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public copy_argsTupleScheme getScheme() {
        return new copy_argsTupleScheme();
      }
    }

    private static class copy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<copy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, copy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSrcBoxId()) {
          optionals.set(0);
        }
        if (struct.isSetSrcInnerPath()) {
          optionals.set(1);
        }
        if (struct.isSetDstBoxId()) {
          optionals.set(2);
        }
        if (struct.isSetDstInnerPath()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSrcBoxId()) {
          oprot.writeI64(struct.srcBoxId);
        }
        if (struct.isSetSrcInnerPath()) {
          oprot.writeString(struct.srcInnerPath);
        }
        if (struct.isSetDstBoxId()) {
          oprot.writeI64(struct.dstBoxId);
        }
        if (struct.isSetDstInnerPath()) {
          oprot.writeString(struct.dstInnerPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, copy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.srcBoxId = iprot.readI64();
          struct.setSrcBoxIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srcInnerPath = iprot.readString();
          struct.setSrcInnerPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dstBoxId = iprot.readI64();
          struct.setDstBoxIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dstInnerPath = iprot.readString();
          struct.setDstInnerPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class copy_result implements org.apache.thrift.TBase<copy_result, copy_result._Fields>, java.io.Serializable, Cloneable, Comparable<copy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("copy_result");

    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new copy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new copy_resultTupleSchemeFactory();

    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(copy_result.class, metaDataMap);
    }

    public copy_result() {
    }

    public copy_result(
      ServiceException excp)
    {
      this();
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copy_result(copy_result other) {
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public copy_result deepCopy() {
      return new copy_result(this);
    }

    @Override
    public void clear() {
      this.excp = null;
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public copy_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof copy_result)
        return this.equals((copy_result)that);
      return false;
    }

    public boolean equals(copy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(copy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("copy_result(");
      boolean first = true;

      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class copy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public copy_resultStandardScheme getScheme() {
        return new copy_resultStandardScheme();
      }
    }

    private static class copy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<copy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, copy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, copy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class copy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public copy_resultTupleScheme getScheme() {
        return new copy_resultTupleScheme();
      }
    }

    private static class copy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<copy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, copy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExcp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, copy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class innerMove_args implements org.apache.thrift.TBase<innerMove_args, innerMove_args._Fields>, java.io.Serializable, Cloneable, Comparable<innerMove_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("innerMove_args");

    private static final org.apache.thrift.protocol.TField BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boxId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SRC_INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("srcInnerPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DST_INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("dstInnerPath", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new innerMove_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new innerMove_argsTupleSchemeFactory();

    public long boxId; // required
    public java.lang.String srcInnerPath; // required
    public java.lang.String dstInnerPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOX_ID((short)1, "boxId"),
      SRC_INNER_PATH((short)2, "srcInnerPath"),
      DST_INNER_PATH((short)3, "dstInnerPath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOX_ID
            return BOX_ID;
          case 2: // SRC_INNER_PATH
            return SRC_INNER_PATH;
          case 3: // DST_INNER_PATH
            return DST_INNER_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BOXID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("boxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SRC_INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("srcInnerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("dstInnerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(innerMove_args.class, metaDataMap);
    }

    public innerMove_args() {
    }

    public innerMove_args(
      long boxId,
      java.lang.String srcInnerPath,
      java.lang.String dstInnerPath)
    {
      this();
      this.boxId = boxId;
      setBoxIdIsSet(true);
      this.srcInnerPath = srcInnerPath;
      this.dstInnerPath = dstInnerPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public innerMove_args(innerMove_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.boxId = other.boxId;
      if (other.isSetSrcInnerPath()) {
        this.srcInnerPath = other.srcInnerPath;
      }
      if (other.isSetDstInnerPath()) {
        this.dstInnerPath = other.dstInnerPath;
      }
    }

    public innerMove_args deepCopy() {
      return new innerMove_args(this);
    }

    @Override
    public void clear() {
      setBoxIdIsSet(false);
      this.boxId = 0;
      this.srcInnerPath = null;
      this.dstInnerPath = null;
    }

    public long getBoxId() {
      return this.boxId;
    }

    public innerMove_args setBoxId(long boxId) {
      this.boxId = boxId;
      setBoxIdIsSet(true);
      return this;
    }

    public void unsetBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    /** Returns true if field boxId is set (has been assigned a value) and false otherwise */
    public boolean isSetBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    public void setBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOXID_ISSET_ID, value);
    }

    public java.lang.String getSrcInnerPath() {
      return this.srcInnerPath;
    }

    public innerMove_args setSrcInnerPath(java.lang.String srcInnerPath) {
      this.srcInnerPath = srcInnerPath;
      return this;
    }

    public void unsetSrcInnerPath() {
      this.srcInnerPath = null;
    }

    /** Returns true if field srcInnerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcInnerPath() {
      return this.srcInnerPath != null;
    }

    public void setSrcInnerPathIsSet(boolean value) {
      if (!value) {
        this.srcInnerPath = null;
      }
    }

    public java.lang.String getDstInnerPath() {
      return this.dstInnerPath;
    }

    public innerMove_args setDstInnerPath(java.lang.String dstInnerPath) {
      this.dstInnerPath = dstInnerPath;
      return this;
    }

    public void unsetDstInnerPath() {
      this.dstInnerPath = null;
    }

    /** Returns true if field dstInnerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDstInnerPath() {
      return this.dstInnerPath != null;
    }

    public void setDstInnerPathIsSet(boolean value) {
      if (!value) {
        this.dstInnerPath = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOX_ID:
        if (value == null) {
          unsetBoxId();
        } else {
          setBoxId((java.lang.Long)value);
        }
        break;

      case SRC_INNER_PATH:
        if (value == null) {
          unsetSrcInnerPath();
        } else {
          setSrcInnerPath((java.lang.String)value);
        }
        break;

      case DST_INNER_PATH:
        if (value == null) {
          unsetDstInnerPath();
        } else {
          setDstInnerPath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOX_ID:
        return getBoxId();

      case SRC_INNER_PATH:
        return getSrcInnerPath();

      case DST_INNER_PATH:
        return getDstInnerPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOX_ID:
        return isSetBoxId();
      case SRC_INNER_PATH:
        return isSetSrcInnerPath();
      case DST_INNER_PATH:
        return isSetDstInnerPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof innerMove_args)
        return this.equals((innerMove_args)that);
      return false;
    }

    public boolean equals(innerMove_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_boxId = true;
      boolean that_present_boxId = true;
      if (this_present_boxId || that_present_boxId) {
        if (!(this_present_boxId && that_present_boxId))
          return false;
        if (this.boxId != that.boxId)
          return false;
      }

      boolean this_present_srcInnerPath = true && this.isSetSrcInnerPath();
      boolean that_present_srcInnerPath = true && that.isSetSrcInnerPath();
      if (this_present_srcInnerPath || that_present_srcInnerPath) {
        if (!(this_present_srcInnerPath && that_present_srcInnerPath))
          return false;
        if (!this.srcInnerPath.equals(that.srcInnerPath))
          return false;
      }

      boolean this_present_dstInnerPath = true && this.isSetDstInnerPath();
      boolean that_present_dstInnerPath = true && that.isSetDstInnerPath();
      if (this_present_dstInnerPath || that_present_dstInnerPath) {
        if (!(this_present_dstInnerPath && that_present_dstInnerPath))
          return false;
        if (!this.dstInnerPath.equals(that.dstInnerPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(boxId);

      hashCode = hashCode * 8191 + ((isSetSrcInnerPath()) ? 131071 : 524287);
      if (isSetSrcInnerPath())
        hashCode = hashCode * 8191 + srcInnerPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDstInnerPath()) ? 131071 : 524287);
      if (isSetDstInnerPath())
        hashCode = hashCode * 8191 + dstInnerPath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(innerMove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBoxId()).compareTo(other.isSetBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boxId, other.boxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSrcInnerPath()).compareTo(other.isSetSrcInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcInnerPath, other.srcInnerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDstInnerPath()).compareTo(other.isSetDstInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstInnerPath, other.dstInnerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("innerMove_args(");
      boolean first = true;

      sb.append("boxId:");
      sb.append(this.boxId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcInnerPath:");
      if (this.srcInnerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.srcInnerPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstInnerPath:");
      if (this.dstInnerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.dstInnerPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class innerMove_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public innerMove_argsStandardScheme getScheme() {
        return new innerMove_argsStandardScheme();
      }
    }

    private static class innerMove_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<innerMove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, innerMove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.boxId = iprot.readI64();
                struct.setBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRC_INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcInnerPath = iprot.readString();
                struct.setSrcInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DST_INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstInnerPath = iprot.readString();
                struct.setDstInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, innerMove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.boxId);
        oprot.writeFieldEnd();
        if (struct.srcInnerPath != null) {
          oprot.writeFieldBegin(SRC_INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.srcInnerPath);
          oprot.writeFieldEnd();
        }
        if (struct.dstInnerPath != null) {
          oprot.writeFieldBegin(DST_INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.dstInnerPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class innerMove_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public innerMove_argsTupleScheme getScheme() {
        return new innerMove_argsTupleScheme();
      }
    }

    private static class innerMove_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<innerMove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, innerMove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBoxId()) {
          optionals.set(0);
        }
        if (struct.isSetSrcInnerPath()) {
          optionals.set(1);
        }
        if (struct.isSetDstInnerPath()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBoxId()) {
          oprot.writeI64(struct.boxId);
        }
        if (struct.isSetSrcInnerPath()) {
          oprot.writeString(struct.srcInnerPath);
        }
        if (struct.isSetDstInnerPath()) {
          oprot.writeString(struct.dstInnerPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, innerMove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.boxId = iprot.readI64();
          struct.setBoxIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srcInnerPath = iprot.readString();
          struct.setSrcInnerPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dstInnerPath = iprot.readString();
          struct.setDstInnerPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class innerMove_result implements org.apache.thrift.TBase<innerMove_result, innerMove_result._Fields>, java.io.Serializable, Cloneable, Comparable<innerMove_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("innerMove_result");

    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new innerMove_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new innerMove_resultTupleSchemeFactory();

    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(innerMove_result.class, metaDataMap);
    }

    public innerMove_result() {
    }

    public innerMove_result(
      ServiceException excp)
    {
      this();
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public innerMove_result(innerMove_result other) {
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public innerMove_result deepCopy() {
      return new innerMove_result(this);
    }

    @Override
    public void clear() {
      this.excp = null;
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public innerMove_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof innerMove_result)
        return this.equals((innerMove_result)that);
      return false;
    }

    public boolean equals(innerMove_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(innerMove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("innerMove_result(");
      boolean first = true;

      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class innerMove_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public innerMove_resultStandardScheme getScheme() {
        return new innerMove_resultStandardScheme();
      }
    }

    private static class innerMove_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<innerMove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, innerMove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, innerMove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class innerMove_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public innerMove_resultTupleScheme getScheme() {
        return new innerMove_resultTupleScheme();
      }
    }

    private static class innerMove_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<innerMove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, innerMove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExcp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, innerMove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class innerCopy_args implements org.apache.thrift.TBase<innerCopy_args, innerCopy_args._Fields>, java.io.Serializable, Cloneable, Comparable<innerCopy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("innerCopy_args");

    private static final org.apache.thrift.protocol.TField BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boxId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SRC_INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("srcInnerPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DST_INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("dstInnerPath", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new innerCopy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new innerCopy_argsTupleSchemeFactory();

    public long boxId; // required
    public java.lang.String srcInnerPath; // required
    public java.lang.String dstInnerPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOX_ID((short)1, "boxId"),
      SRC_INNER_PATH((short)2, "srcInnerPath"),
      DST_INNER_PATH((short)3, "dstInnerPath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOX_ID
            return BOX_ID;
          case 2: // SRC_INNER_PATH
            return SRC_INNER_PATH;
          case 3: // DST_INNER_PATH
            return DST_INNER_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BOXID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("boxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SRC_INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("srcInnerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("dstInnerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(innerCopy_args.class, metaDataMap);
    }

    public innerCopy_args() {
    }

    public innerCopy_args(
      long boxId,
      java.lang.String srcInnerPath,
      java.lang.String dstInnerPath)
    {
      this();
      this.boxId = boxId;
      setBoxIdIsSet(true);
      this.srcInnerPath = srcInnerPath;
      this.dstInnerPath = dstInnerPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public innerCopy_args(innerCopy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.boxId = other.boxId;
      if (other.isSetSrcInnerPath()) {
        this.srcInnerPath = other.srcInnerPath;
      }
      if (other.isSetDstInnerPath()) {
        this.dstInnerPath = other.dstInnerPath;
      }
    }

    public innerCopy_args deepCopy() {
      return new innerCopy_args(this);
    }

    @Override
    public void clear() {
      setBoxIdIsSet(false);
      this.boxId = 0;
      this.srcInnerPath = null;
      this.dstInnerPath = null;
    }

    public long getBoxId() {
      return this.boxId;
    }

    public innerCopy_args setBoxId(long boxId) {
      this.boxId = boxId;
      setBoxIdIsSet(true);
      return this;
    }

    public void unsetBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    /** Returns true if field boxId is set (has been assigned a value) and false otherwise */
    public boolean isSetBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    public void setBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOXID_ISSET_ID, value);
    }

    public java.lang.String getSrcInnerPath() {
      return this.srcInnerPath;
    }

    public innerCopy_args setSrcInnerPath(java.lang.String srcInnerPath) {
      this.srcInnerPath = srcInnerPath;
      return this;
    }

    public void unsetSrcInnerPath() {
      this.srcInnerPath = null;
    }

    /** Returns true if field srcInnerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcInnerPath() {
      return this.srcInnerPath != null;
    }

    public void setSrcInnerPathIsSet(boolean value) {
      if (!value) {
        this.srcInnerPath = null;
      }
    }

    public java.lang.String getDstInnerPath() {
      return this.dstInnerPath;
    }

    public innerCopy_args setDstInnerPath(java.lang.String dstInnerPath) {
      this.dstInnerPath = dstInnerPath;
      return this;
    }

    public void unsetDstInnerPath() {
      this.dstInnerPath = null;
    }

    /** Returns true if field dstInnerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDstInnerPath() {
      return this.dstInnerPath != null;
    }

    public void setDstInnerPathIsSet(boolean value) {
      if (!value) {
        this.dstInnerPath = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOX_ID:
        if (value == null) {
          unsetBoxId();
        } else {
          setBoxId((java.lang.Long)value);
        }
        break;

      case SRC_INNER_PATH:
        if (value == null) {
          unsetSrcInnerPath();
        } else {
          setSrcInnerPath((java.lang.String)value);
        }
        break;

      case DST_INNER_PATH:
        if (value == null) {
          unsetDstInnerPath();
        } else {
          setDstInnerPath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOX_ID:
        return getBoxId();

      case SRC_INNER_PATH:
        return getSrcInnerPath();

      case DST_INNER_PATH:
        return getDstInnerPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOX_ID:
        return isSetBoxId();
      case SRC_INNER_PATH:
        return isSetSrcInnerPath();
      case DST_INNER_PATH:
        return isSetDstInnerPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof innerCopy_args)
        return this.equals((innerCopy_args)that);
      return false;
    }

    public boolean equals(innerCopy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_boxId = true;
      boolean that_present_boxId = true;
      if (this_present_boxId || that_present_boxId) {
        if (!(this_present_boxId && that_present_boxId))
          return false;
        if (this.boxId != that.boxId)
          return false;
      }

      boolean this_present_srcInnerPath = true && this.isSetSrcInnerPath();
      boolean that_present_srcInnerPath = true && that.isSetSrcInnerPath();
      if (this_present_srcInnerPath || that_present_srcInnerPath) {
        if (!(this_present_srcInnerPath && that_present_srcInnerPath))
          return false;
        if (!this.srcInnerPath.equals(that.srcInnerPath))
          return false;
      }

      boolean this_present_dstInnerPath = true && this.isSetDstInnerPath();
      boolean that_present_dstInnerPath = true && that.isSetDstInnerPath();
      if (this_present_dstInnerPath || that_present_dstInnerPath) {
        if (!(this_present_dstInnerPath && that_present_dstInnerPath))
          return false;
        if (!this.dstInnerPath.equals(that.dstInnerPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(boxId);

      hashCode = hashCode * 8191 + ((isSetSrcInnerPath()) ? 131071 : 524287);
      if (isSetSrcInnerPath())
        hashCode = hashCode * 8191 + srcInnerPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDstInnerPath()) ? 131071 : 524287);
      if (isSetDstInnerPath())
        hashCode = hashCode * 8191 + dstInnerPath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(innerCopy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBoxId()).compareTo(other.isSetBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boxId, other.boxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSrcInnerPath()).compareTo(other.isSetSrcInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcInnerPath, other.srcInnerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDstInnerPath()).compareTo(other.isSetDstInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstInnerPath, other.dstInnerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("innerCopy_args(");
      boolean first = true;

      sb.append("boxId:");
      sb.append(this.boxId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcInnerPath:");
      if (this.srcInnerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.srcInnerPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstInnerPath:");
      if (this.dstInnerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.dstInnerPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class innerCopy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public innerCopy_argsStandardScheme getScheme() {
        return new innerCopy_argsStandardScheme();
      }
    }

    private static class innerCopy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<innerCopy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, innerCopy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.boxId = iprot.readI64();
                struct.setBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRC_INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcInnerPath = iprot.readString();
                struct.setSrcInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DST_INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstInnerPath = iprot.readString();
                struct.setDstInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, innerCopy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.boxId);
        oprot.writeFieldEnd();
        if (struct.srcInnerPath != null) {
          oprot.writeFieldBegin(SRC_INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.srcInnerPath);
          oprot.writeFieldEnd();
        }
        if (struct.dstInnerPath != null) {
          oprot.writeFieldBegin(DST_INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.dstInnerPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class innerCopy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public innerCopy_argsTupleScheme getScheme() {
        return new innerCopy_argsTupleScheme();
      }
    }

    private static class innerCopy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<innerCopy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, innerCopy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBoxId()) {
          optionals.set(0);
        }
        if (struct.isSetSrcInnerPath()) {
          optionals.set(1);
        }
        if (struct.isSetDstInnerPath()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBoxId()) {
          oprot.writeI64(struct.boxId);
        }
        if (struct.isSetSrcInnerPath()) {
          oprot.writeString(struct.srcInnerPath);
        }
        if (struct.isSetDstInnerPath()) {
          oprot.writeString(struct.dstInnerPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, innerCopy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.boxId = iprot.readI64();
          struct.setBoxIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srcInnerPath = iprot.readString();
          struct.setSrcInnerPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dstInnerPath = iprot.readString();
          struct.setDstInnerPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class innerCopy_result implements org.apache.thrift.TBase<innerCopy_result, innerCopy_result._Fields>, java.io.Serializable, Cloneable, Comparable<innerCopy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("innerCopy_result");

    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new innerCopy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new innerCopy_resultTupleSchemeFactory();

    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(innerCopy_result.class, metaDataMap);
    }

    public innerCopy_result() {
    }

    public innerCopy_result(
      ServiceException excp)
    {
      this();
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public innerCopy_result(innerCopy_result other) {
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public innerCopy_result deepCopy() {
      return new innerCopy_result(this);
    }

    @Override
    public void clear() {
      this.excp = null;
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public innerCopy_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof innerCopy_result)
        return this.equals((innerCopy_result)that);
      return false;
    }

    public boolean equals(innerCopy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(innerCopy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("innerCopy_result(");
      boolean first = true;

      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class innerCopy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public innerCopy_resultStandardScheme getScheme() {
        return new innerCopy_resultStandardScheme();
      }
    }

    private static class innerCopy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<innerCopy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, innerCopy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, innerCopy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class innerCopy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public innerCopy_resultTupleScheme getScheme() {
        return new innerCopy_resultTupleScheme();
      }
    }

    private static class innerCopy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<innerCopy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, innerCopy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExcp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, innerCopy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
