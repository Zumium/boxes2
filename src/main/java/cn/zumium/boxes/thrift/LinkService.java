/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.zumium.boxes.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-02-17")
public class LinkService {

  public interface Iface {

    public void create(long boxId, java.lang.String innerPath, java.lang.String destination, LinkType linkType) throws ServiceException, org.apache.thrift.TException;

    public java.util.List<Link> lsAll() throws ServiceException, org.apache.thrift.TException;

    public java.util.List<Link> lsBox(long boxId) throws ServiceException, org.apache.thrift.TException;

    public java.util.List<Link> lsInner(long boxId, java.lang.String innerPath) throws ServiceException, org.apache.thrift.TException;

    public void removeAll() throws ServiceException, org.apache.thrift.TException;

    public void removeById(long id) throws ServiceException, org.apache.thrift.TException;

    public void removeByBox(long boxId) throws ServiceException, org.apache.thrift.TException;

    public void removeByInner(long boxId, java.lang.String innerPath) throws ServiceException, org.apache.thrift.TException;

    public void removeByDestination(java.lang.String destination) throws ServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void create(long boxId, java.lang.String innerPath, java.lang.String destination, LinkType linkType, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void lsAll(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> resultHandler) throws org.apache.thrift.TException;

    public void lsBox(long boxId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> resultHandler) throws org.apache.thrift.TException;

    public void lsInner(long boxId, java.lang.String innerPath, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> resultHandler) throws org.apache.thrift.TException;

    public void removeAll(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void removeById(long id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void removeByBox(long boxId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void removeByInner(long boxId, java.lang.String innerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void removeByDestination(java.lang.String destination, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void create(long boxId, java.lang.String innerPath, java.lang.String destination, LinkType linkType) throws ServiceException, org.apache.thrift.TException
    {
      send_create(boxId, innerPath, destination, linkType);
      recv_create();
    }

    public void send_create(long boxId, java.lang.String innerPath, java.lang.String destination, LinkType linkType) throws org.apache.thrift.TException
    {
      create_args args = new create_args();
      args.setBoxId(boxId);
      args.setInnerPath(innerPath);
      args.setDestination(destination);
      args.setLinkType(linkType);
      sendBase("create", args);
    }

    public void recv_create() throws ServiceException, org.apache.thrift.TException
    {
      create_result result = new create_result();
      receiveBase(result, "create");
      if (result.excp != null) {
        throw result.excp;
      }
      return;
    }

    public java.util.List<Link> lsAll() throws ServiceException, org.apache.thrift.TException
    {
      send_lsAll();
      return recv_lsAll();
    }

    public void send_lsAll() throws org.apache.thrift.TException
    {
      lsAll_args args = new lsAll_args();
      sendBase("lsAll", args);
    }

    public java.util.List<Link> recv_lsAll() throws ServiceException, org.apache.thrift.TException
    {
      lsAll_result result = new lsAll_result();
      receiveBase(result, "lsAll");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.excp != null) {
        throw result.excp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lsAll failed: unknown result");
    }

    public java.util.List<Link> lsBox(long boxId) throws ServiceException, org.apache.thrift.TException
    {
      send_lsBox(boxId);
      return recv_lsBox();
    }

    public void send_lsBox(long boxId) throws org.apache.thrift.TException
    {
      lsBox_args args = new lsBox_args();
      args.setBoxId(boxId);
      sendBase("lsBox", args);
    }

    public java.util.List<Link> recv_lsBox() throws ServiceException, org.apache.thrift.TException
    {
      lsBox_result result = new lsBox_result();
      receiveBase(result, "lsBox");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.excp != null) {
        throw result.excp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lsBox failed: unknown result");
    }

    public java.util.List<Link> lsInner(long boxId, java.lang.String innerPath) throws ServiceException, org.apache.thrift.TException
    {
      send_lsInner(boxId, innerPath);
      return recv_lsInner();
    }

    public void send_lsInner(long boxId, java.lang.String innerPath) throws org.apache.thrift.TException
    {
      lsInner_args args = new lsInner_args();
      args.setBoxId(boxId);
      args.setInnerPath(innerPath);
      sendBase("lsInner", args);
    }

    public java.util.List<Link> recv_lsInner() throws ServiceException, org.apache.thrift.TException
    {
      lsInner_result result = new lsInner_result();
      receiveBase(result, "lsInner");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.excp != null) {
        throw result.excp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lsInner failed: unknown result");
    }

    public void removeAll() throws ServiceException, org.apache.thrift.TException
    {
      send_removeAll();
      recv_removeAll();
    }

    public void send_removeAll() throws org.apache.thrift.TException
    {
      removeAll_args args = new removeAll_args();
      sendBase("removeAll", args);
    }

    public void recv_removeAll() throws ServiceException, org.apache.thrift.TException
    {
      removeAll_result result = new removeAll_result();
      receiveBase(result, "removeAll");
      if (result.excp != null) {
        throw result.excp;
      }
      return;
    }

    public void removeById(long id) throws ServiceException, org.apache.thrift.TException
    {
      send_removeById(id);
      recv_removeById();
    }

    public void send_removeById(long id) throws org.apache.thrift.TException
    {
      removeById_args args = new removeById_args();
      args.setId(id);
      sendBase("removeById", args);
    }

    public void recv_removeById() throws ServiceException, org.apache.thrift.TException
    {
      removeById_result result = new removeById_result();
      receiveBase(result, "removeById");
      if (result.excp != null) {
        throw result.excp;
      }
      return;
    }

    public void removeByBox(long boxId) throws ServiceException, org.apache.thrift.TException
    {
      send_removeByBox(boxId);
      recv_removeByBox();
    }

    public void send_removeByBox(long boxId) throws org.apache.thrift.TException
    {
      removeByBox_args args = new removeByBox_args();
      args.setBoxId(boxId);
      sendBase("removeByBox", args);
    }

    public void recv_removeByBox() throws ServiceException, org.apache.thrift.TException
    {
      removeByBox_result result = new removeByBox_result();
      receiveBase(result, "removeByBox");
      if (result.excp != null) {
        throw result.excp;
      }
      return;
    }

    public void removeByInner(long boxId, java.lang.String innerPath) throws ServiceException, org.apache.thrift.TException
    {
      send_removeByInner(boxId, innerPath);
      recv_removeByInner();
    }

    public void send_removeByInner(long boxId, java.lang.String innerPath) throws org.apache.thrift.TException
    {
      removeByInner_args args = new removeByInner_args();
      args.setBoxId(boxId);
      args.setInnerPath(innerPath);
      sendBase("removeByInner", args);
    }

    public void recv_removeByInner() throws ServiceException, org.apache.thrift.TException
    {
      removeByInner_result result = new removeByInner_result();
      receiveBase(result, "removeByInner");
      if (result.excp != null) {
        throw result.excp;
      }
      return;
    }

    public void removeByDestination(java.lang.String destination) throws ServiceException, org.apache.thrift.TException
    {
      send_removeByDestination(destination);
      recv_removeByDestination();
    }

    public void send_removeByDestination(java.lang.String destination) throws org.apache.thrift.TException
    {
      removeByDestination_args args = new removeByDestination_args();
      args.setDestination(destination);
      sendBase("removeByDestination", args);
    }

    public void recv_removeByDestination() throws ServiceException, org.apache.thrift.TException
    {
      removeByDestination_result result = new removeByDestination_result();
      receiveBase(result, "removeByDestination");
      if (result.excp != null) {
        throw result.excp;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void create(long boxId, java.lang.String innerPath, java.lang.String destination, LinkType linkType, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_call method_call = new create_call(boxId, innerPath, destination, linkType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long boxId;
      private java.lang.String innerPath;
      private java.lang.String destination;
      private LinkType linkType;
      public create_call(long boxId, java.lang.String innerPath, java.lang.String destination, LinkType linkType, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.boxId = boxId;
        this.innerPath = innerPath;
        this.destination = destination;
        this.linkType = linkType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_args args = new create_args();
        args.setBoxId(boxId);
        args.setInnerPath(innerPath);
        args.setDestination(destination);
        args.setLinkType(linkType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void lsAll(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lsAll_call method_call = new lsAll_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lsAll_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Link>> {
      public lsAll_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lsAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lsAll_args args = new lsAll_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Link> getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lsAll();
      }
    }

    public void lsBox(long boxId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lsBox_call method_call = new lsBox_call(boxId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lsBox_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Link>> {
      private long boxId;
      public lsBox_call(long boxId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.boxId = boxId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lsBox", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lsBox_args args = new lsBox_args();
        args.setBoxId(boxId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Link> getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lsBox();
      }
    }

    public void lsInner(long boxId, java.lang.String innerPath, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lsInner_call method_call = new lsInner_call(boxId, innerPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lsInner_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Link>> {
      private long boxId;
      private java.lang.String innerPath;
      public lsInner_call(long boxId, java.lang.String innerPath, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.boxId = boxId;
        this.innerPath = innerPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lsInner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lsInner_args args = new lsInner_args();
        args.setBoxId(boxId);
        args.setInnerPath(innerPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Link> getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lsInner();
      }
    }

    public void removeAll(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeAll_call method_call = new removeAll_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeAll_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public removeAll_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeAll_args args = new removeAll_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void removeById(long id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeById_call method_call = new removeById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeById_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long id;
      public removeById_call(long id, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeById_args args = new removeById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void removeByBox(long boxId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeByBox_call method_call = new removeByBox_call(boxId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeByBox_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long boxId;
      public removeByBox_call(long boxId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.boxId = boxId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeByBox", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeByBox_args args = new removeByBox_args();
        args.setBoxId(boxId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void removeByInner(long boxId, java.lang.String innerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeByInner_call method_call = new removeByInner_call(boxId, innerPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeByInner_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long boxId;
      private java.lang.String innerPath;
      public removeByInner_call(long boxId, java.lang.String innerPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.boxId = boxId;
        this.innerPath = innerPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeByInner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeByInner_args args = new removeByInner_args();
        args.setBoxId(boxId);
        args.setInnerPath(innerPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void removeByDestination(java.lang.String destination, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeByDestination_call method_call = new removeByDestination_call(destination, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeByDestination_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String destination;
      public removeByDestination_call(java.lang.String destination, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.destination = destination;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeByDestination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeByDestination_args args = new removeByDestination_args();
        args.setDestination(destination);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws ServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("create", new create());
      processMap.put("lsAll", new lsAll());
      processMap.put("lsBox", new lsBox());
      processMap.put("lsInner", new lsInner());
      processMap.put("removeAll", new removeAll());
      processMap.put("removeById", new removeById());
      processMap.put("removeByBox", new removeByBox());
      processMap.put("removeByInner", new removeByInner());
      processMap.put("removeByDestination", new removeByDestination());
      return processMap;
    }

    public static class create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_args> {
      public create() {
        super("create");
      }

      public create_args getEmptyArgsInstance() {
        return new create_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public create_result getResult(I iface, create_args args) throws org.apache.thrift.TException {
        create_result result = new create_result();
        try {
          iface.create(args.boxId, args.innerPath, args.destination, args.linkType);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class lsAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lsAll_args> {
      public lsAll() {
        super("lsAll");
      }

      public lsAll_args getEmptyArgsInstance() {
        return new lsAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public lsAll_result getResult(I iface, lsAll_args args) throws org.apache.thrift.TException {
        lsAll_result result = new lsAll_result();
        try {
          result.success = iface.lsAll();
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class lsBox<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lsBox_args> {
      public lsBox() {
        super("lsBox");
      }

      public lsBox_args getEmptyArgsInstance() {
        return new lsBox_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public lsBox_result getResult(I iface, lsBox_args args) throws org.apache.thrift.TException {
        lsBox_result result = new lsBox_result();
        try {
          result.success = iface.lsBox(args.boxId);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class lsInner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lsInner_args> {
      public lsInner() {
        super("lsInner");
      }

      public lsInner_args getEmptyArgsInstance() {
        return new lsInner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public lsInner_result getResult(I iface, lsInner_args args) throws org.apache.thrift.TException {
        lsInner_result result = new lsInner_result();
        try {
          result.success = iface.lsInner(args.boxId, args.innerPath);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class removeAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeAll_args> {
      public removeAll() {
        super("removeAll");
      }

      public removeAll_args getEmptyArgsInstance() {
        return new removeAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public removeAll_result getResult(I iface, removeAll_args args) throws org.apache.thrift.TException {
        removeAll_result result = new removeAll_result();
        try {
          iface.removeAll();
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class removeById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeById_args> {
      public removeById() {
        super("removeById");
      }

      public removeById_args getEmptyArgsInstance() {
        return new removeById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public removeById_result getResult(I iface, removeById_args args) throws org.apache.thrift.TException {
        removeById_result result = new removeById_result();
        try {
          iface.removeById(args.id);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class removeByBox<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeByBox_args> {
      public removeByBox() {
        super("removeByBox");
      }

      public removeByBox_args getEmptyArgsInstance() {
        return new removeByBox_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public removeByBox_result getResult(I iface, removeByBox_args args) throws org.apache.thrift.TException {
        removeByBox_result result = new removeByBox_result();
        try {
          iface.removeByBox(args.boxId);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class removeByInner<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeByInner_args> {
      public removeByInner() {
        super("removeByInner");
      }

      public removeByInner_args getEmptyArgsInstance() {
        return new removeByInner_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public removeByInner_result getResult(I iface, removeByInner_args args) throws org.apache.thrift.TException {
        removeByInner_result result = new removeByInner_result();
        try {
          iface.removeByInner(args.boxId, args.innerPath);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

    public static class removeByDestination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeByDestination_args> {
      public removeByDestination() {
        super("removeByDestination");
      }

      public removeByDestination_args getEmptyArgsInstance() {
        return new removeByDestination_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public removeByDestination_result getResult(I iface, removeByDestination_args args) throws org.apache.thrift.TException {
        removeByDestination_result result = new removeByDestination_result();
        try {
          iface.removeByDestination(args.destination);
        } catch (ServiceException excp) {
          result.excp = excp;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("create", new create());
      processMap.put("lsAll", new lsAll());
      processMap.put("lsBox", new lsBox());
      processMap.put("lsInner", new lsInner());
      processMap.put("removeAll", new removeAll());
      processMap.put("removeById", new removeById());
      processMap.put("removeByBox", new removeByBox());
      processMap.put("removeByInner", new removeByInner());
      processMap.put("removeByDestination", new removeByDestination());
      return processMap;
    }

    public static class create<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, create_args, Void> {
      public create() {
        super("create");
      }

      public create_args getEmptyArgsInstance() {
        return new create_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            create_result result = new create_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            create_result result = new create_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, create_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.create(args.boxId, args.innerPath, args.destination, args.linkType,resultHandler);
      }
    }

    public static class lsAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lsAll_args, java.util.List<Link>> {
      public lsAll() {
        super("lsAll");
      }

      public lsAll_args getEmptyArgsInstance() {
        return new lsAll_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>>() { 
          public void onComplete(java.util.List<Link> o) {
            lsAll_result result = new lsAll_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            lsAll_result result = new lsAll_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lsAll_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> resultHandler) throws org.apache.thrift.TException {
        iface.lsAll(resultHandler);
      }
    }

    public static class lsBox<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lsBox_args, java.util.List<Link>> {
      public lsBox() {
        super("lsBox");
      }

      public lsBox_args getEmptyArgsInstance() {
        return new lsBox_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>>() { 
          public void onComplete(java.util.List<Link> o) {
            lsBox_result result = new lsBox_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            lsBox_result result = new lsBox_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lsBox_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> resultHandler) throws org.apache.thrift.TException {
        iface.lsBox(args.boxId,resultHandler);
      }
    }

    public static class lsInner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lsInner_args, java.util.List<Link>> {
      public lsInner() {
        super("lsInner");
      }

      public lsInner_args getEmptyArgsInstance() {
        return new lsInner_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>>() { 
          public void onComplete(java.util.List<Link> o) {
            lsInner_result result = new lsInner_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            lsInner_result result = new lsInner_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lsInner_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Link>> resultHandler) throws org.apache.thrift.TException {
        iface.lsInner(args.boxId, args.innerPath,resultHandler);
      }
    }

    public static class removeAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeAll_args, Void> {
      public removeAll() {
        super("removeAll");
      }

      public removeAll_args getEmptyArgsInstance() {
        return new removeAll_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeAll_result result = new removeAll_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeAll_result result = new removeAll_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeAll_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.removeAll(resultHandler);
      }
    }

    public static class removeById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeById_args, Void> {
      public removeById() {
        super("removeById");
      }

      public removeById_args getEmptyArgsInstance() {
        return new removeById_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeById_result result = new removeById_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeById_result result = new removeById_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeById_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.removeById(args.id,resultHandler);
      }
    }

    public static class removeByBox<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeByBox_args, Void> {
      public removeByBox() {
        super("removeByBox");
      }

      public removeByBox_args getEmptyArgsInstance() {
        return new removeByBox_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeByBox_result result = new removeByBox_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeByBox_result result = new removeByBox_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeByBox_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.removeByBox(args.boxId,resultHandler);
      }
    }

    public static class removeByInner<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeByInner_args, Void> {
      public removeByInner() {
        super("removeByInner");
      }

      public removeByInner_args getEmptyArgsInstance() {
        return new removeByInner_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeByInner_result result = new removeByInner_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeByInner_result result = new removeByInner_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeByInner_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.removeByInner(args.boxId, args.innerPath,resultHandler);
      }
    }

    public static class removeByDestination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeByDestination_args, Void> {
      public removeByDestination() {
        super("removeByDestination");
      }

      public removeByDestination_args getEmptyArgsInstance() {
        return new removeByDestination_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removeByDestination_result result = new removeByDestination_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeByDestination_result result = new removeByDestination_result();
            if (e instanceof ServiceException) {
              result.excp = (ServiceException) e;
              result.setExcpIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeByDestination_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.removeByDestination(args.destination,resultHandler);
      }
    }

  }

  public static class create_args implements org.apache.thrift.TBase<create_args, create_args._Fields>, java.io.Serializable, Cloneable, Comparable<create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_args");

    private static final org.apache.thrift.protocol.TField BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boxId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("innerPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DESTINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("destination", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField LINK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("linkType", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new create_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new create_argsTupleSchemeFactory();

    public long boxId; // required
    public java.lang.String innerPath; // required
    public java.lang.String destination; // required
    /**
     * 
     * @see LinkType
     */
    public LinkType linkType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOX_ID((short)1, "boxId"),
      INNER_PATH((short)2, "innerPath"),
      DESTINATION((short)3, "destination"),
      /**
       * 
       * @see LinkType
       */
      LINK_TYPE((short)4, "linkType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOX_ID
            return BOX_ID;
          case 2: // INNER_PATH
            return INNER_PATH;
          case 3: // DESTINATION
            return DESTINATION;
          case 4: // LINK_TYPE
            return LINK_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BOXID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("boxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("innerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESTINATION, new org.apache.thrift.meta_data.FieldMetaData("destination", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LINK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("linkType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LinkType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_args.class, metaDataMap);
    }

    public create_args() {
    }

    public create_args(
      long boxId,
      java.lang.String innerPath,
      java.lang.String destination,
      LinkType linkType)
    {
      this();
      this.boxId = boxId;
      setBoxIdIsSet(true);
      this.innerPath = innerPath;
      this.destination = destination;
      this.linkType = linkType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_args(create_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.boxId = other.boxId;
      if (other.isSetInnerPath()) {
        this.innerPath = other.innerPath;
      }
      if (other.isSetDestination()) {
        this.destination = other.destination;
      }
      if (other.isSetLinkType()) {
        this.linkType = other.linkType;
      }
    }

    public create_args deepCopy() {
      return new create_args(this);
    }

    @Override
    public void clear() {
      setBoxIdIsSet(false);
      this.boxId = 0;
      this.innerPath = null;
      this.destination = null;
      this.linkType = null;
    }

    public long getBoxId() {
      return this.boxId;
    }

    public create_args setBoxId(long boxId) {
      this.boxId = boxId;
      setBoxIdIsSet(true);
      return this;
    }

    public void unsetBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    /** Returns true if field boxId is set (has been assigned a value) and false otherwise */
    public boolean isSetBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    public void setBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOXID_ISSET_ID, value);
    }

    public java.lang.String getInnerPath() {
      return this.innerPath;
    }

    public create_args setInnerPath(java.lang.String innerPath) {
      this.innerPath = innerPath;
      return this;
    }

    public void unsetInnerPath() {
      this.innerPath = null;
    }

    /** Returns true if field innerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInnerPath() {
      return this.innerPath != null;
    }

    public void setInnerPathIsSet(boolean value) {
      if (!value) {
        this.innerPath = null;
      }
    }

    public java.lang.String getDestination() {
      return this.destination;
    }

    public create_args setDestination(java.lang.String destination) {
      this.destination = destination;
      return this;
    }

    public void unsetDestination() {
      this.destination = null;
    }

    /** Returns true if field destination is set (has been assigned a value) and false otherwise */
    public boolean isSetDestination() {
      return this.destination != null;
    }

    public void setDestinationIsSet(boolean value) {
      if (!value) {
        this.destination = null;
      }
    }

    /**
     * 
     * @see LinkType
     */
    public LinkType getLinkType() {
      return this.linkType;
    }

    /**
     * 
     * @see LinkType
     */
    public create_args setLinkType(LinkType linkType) {
      this.linkType = linkType;
      return this;
    }

    public void unsetLinkType() {
      this.linkType = null;
    }

    /** Returns true if field linkType is set (has been assigned a value) and false otherwise */
    public boolean isSetLinkType() {
      return this.linkType != null;
    }

    public void setLinkTypeIsSet(boolean value) {
      if (!value) {
        this.linkType = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOX_ID:
        if (value == null) {
          unsetBoxId();
        } else {
          setBoxId((java.lang.Long)value);
        }
        break;

      case INNER_PATH:
        if (value == null) {
          unsetInnerPath();
        } else {
          setInnerPath((java.lang.String)value);
        }
        break;

      case DESTINATION:
        if (value == null) {
          unsetDestination();
        } else {
          setDestination((java.lang.String)value);
        }
        break;

      case LINK_TYPE:
        if (value == null) {
          unsetLinkType();
        } else {
          setLinkType((LinkType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOX_ID:
        return getBoxId();

      case INNER_PATH:
        return getInnerPath();

      case DESTINATION:
        return getDestination();

      case LINK_TYPE:
        return getLinkType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOX_ID:
        return isSetBoxId();
      case INNER_PATH:
        return isSetInnerPath();
      case DESTINATION:
        return isSetDestination();
      case LINK_TYPE:
        return isSetLinkType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof create_args)
        return this.equals((create_args)that);
      return false;
    }

    public boolean equals(create_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_boxId = true;
      boolean that_present_boxId = true;
      if (this_present_boxId || that_present_boxId) {
        if (!(this_present_boxId && that_present_boxId))
          return false;
        if (this.boxId != that.boxId)
          return false;
      }

      boolean this_present_innerPath = true && this.isSetInnerPath();
      boolean that_present_innerPath = true && that.isSetInnerPath();
      if (this_present_innerPath || that_present_innerPath) {
        if (!(this_present_innerPath && that_present_innerPath))
          return false;
        if (!this.innerPath.equals(that.innerPath))
          return false;
      }

      boolean this_present_destination = true && this.isSetDestination();
      boolean that_present_destination = true && that.isSetDestination();
      if (this_present_destination || that_present_destination) {
        if (!(this_present_destination && that_present_destination))
          return false;
        if (!this.destination.equals(that.destination))
          return false;
      }

      boolean this_present_linkType = true && this.isSetLinkType();
      boolean that_present_linkType = true && that.isSetLinkType();
      if (this_present_linkType || that_present_linkType) {
        if (!(this_present_linkType && that_present_linkType))
          return false;
        if (!this.linkType.equals(that.linkType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(boxId);

      hashCode = hashCode * 8191 + ((isSetInnerPath()) ? 131071 : 524287);
      if (isSetInnerPath())
        hashCode = hashCode * 8191 + innerPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDestination()) ? 131071 : 524287);
      if (isSetDestination())
        hashCode = hashCode * 8191 + destination.hashCode();

      hashCode = hashCode * 8191 + ((isSetLinkType()) ? 131071 : 524287);
      if (isSetLinkType())
        hashCode = hashCode * 8191 + linkType.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBoxId()).compareTo(other.isSetBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boxId, other.boxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInnerPath()).compareTo(other.isSetInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerPath, other.innerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDestination()).compareTo(other.isSetDestination());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDestination()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destination, other.destination);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLinkType()).compareTo(other.isSetLinkType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLinkType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkType, other.linkType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("create_args(");
      boolean first = true;

      sb.append("boxId:");
      sb.append(this.boxId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("innerPath:");
      if (this.innerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.innerPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("destination:");
      if (this.destination == null) {
        sb.append("null");
      } else {
        sb.append(this.destination);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("linkType:");
      if (this.linkType == null) {
        sb.append("null");
      } else {
        sb.append(this.linkType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_argsStandardScheme getScheme() {
        return new create_argsStandardScheme();
      }
    }

    private static class create_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<create_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.boxId = iprot.readI64();
                struct.setBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.innerPath = iprot.readString();
                struct.setInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DESTINATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.destination = iprot.readString();
                struct.setDestinationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LINK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.linkType = cn.zumium.boxes.thrift.LinkType.findByValue(iprot.readI32());
                struct.setLinkTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.boxId);
        oprot.writeFieldEnd();
        if (struct.innerPath != null) {
          oprot.writeFieldBegin(INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.innerPath);
          oprot.writeFieldEnd();
        }
        if (struct.destination != null) {
          oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
          oprot.writeString(struct.destination);
          oprot.writeFieldEnd();
        }
        if (struct.linkType != null) {
          oprot.writeFieldBegin(LINK_TYPE_FIELD_DESC);
          oprot.writeI32(struct.linkType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_argsTupleScheme getScheme() {
        return new create_argsTupleScheme();
      }
    }

    private static class create_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<create_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBoxId()) {
          optionals.set(0);
        }
        if (struct.isSetInnerPath()) {
          optionals.set(1);
        }
        if (struct.isSetDestination()) {
          optionals.set(2);
        }
        if (struct.isSetLinkType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetBoxId()) {
          oprot.writeI64(struct.boxId);
        }
        if (struct.isSetInnerPath()) {
          oprot.writeString(struct.innerPath);
        }
        if (struct.isSetDestination()) {
          oprot.writeString(struct.destination);
        }
        if (struct.isSetLinkType()) {
          oprot.writeI32(struct.linkType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.boxId = iprot.readI64();
          struct.setBoxIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.innerPath = iprot.readString();
          struct.setInnerPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.destination = iprot.readString();
          struct.setDestinationIsSet(true);
        }
        if (incoming.get(3)) {
          struct.linkType = cn.zumium.boxes.thrift.LinkType.findByValue(iprot.readI32());
          struct.setLinkTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class create_result implements org.apache.thrift.TBase<create_result, create_result._Fields>, java.io.Serializable, Cloneable, Comparable<create_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_result");

    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new create_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new create_resultTupleSchemeFactory();

    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_result.class, metaDataMap);
    }

    public create_result() {
    }

    public create_result(
      ServiceException excp)
    {
      this();
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_result(create_result other) {
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public create_result deepCopy() {
      return new create_result(this);
    }

    @Override
    public void clear() {
      this.excp = null;
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public create_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof create_result)
        return this.equals((create_result)that);
      return false;
    }

    public boolean equals(create_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("create_result(");
      boolean first = true;

      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_resultStandardScheme getScheme() {
        return new create_resultStandardScheme();
      }
    }

    private static class create_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<create_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public create_resultTupleScheme getScheme() {
        return new create_resultTupleScheme();
      }
    }

    private static class create_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<create_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExcp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lsAll_args implements org.apache.thrift.TBase<lsAll_args, lsAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<lsAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lsAll_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lsAll_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lsAll_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lsAll_args.class, metaDataMap);
    }

    public lsAll_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lsAll_args(lsAll_args other) {
    }

    public lsAll_args deepCopy() {
      return new lsAll_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lsAll_args)
        return this.equals((lsAll_args)that);
      return false;
    }

    public boolean equals(lsAll_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(lsAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lsAll_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lsAll_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lsAll_argsStandardScheme getScheme() {
        return new lsAll_argsStandardScheme();
      }
    }

    private static class lsAll_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<lsAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lsAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lsAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lsAll_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lsAll_argsTupleScheme getScheme() {
        return new lsAll_argsTupleScheme();
      }
    }

    private static class lsAll_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<lsAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lsAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lsAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lsAll_result implements org.apache.thrift.TBase<lsAll_result, lsAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<lsAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lsAll_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lsAll_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lsAll_resultTupleSchemeFactory();

    public java.util.List<Link> success; // required
    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Link.class))));
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lsAll_result.class, metaDataMap);
    }

    public lsAll_result() {
    }

    public lsAll_result(
      java.util.List<Link> success,
      ServiceException excp)
    {
      this();
      this.success = success;
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lsAll_result(lsAll_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Link> __this__success = new java.util.ArrayList<Link>(other.success.size());
        for (Link other_element : other.success) {
          __this__success.add(new Link(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public lsAll_result deepCopy() {
      return new lsAll_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.excp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Link> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Link elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Link>();
      }
      this.success.add(elem);
    }

    public java.util.List<Link> getSuccess() {
      return this.success;
    }

    public lsAll_result setSuccess(java.util.List<Link> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public lsAll_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Link>)value);
        }
        break;

      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lsAll_result)
        return this.equals((lsAll_result)that);
      return false;
    }

    public boolean equals(lsAll_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(lsAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lsAll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lsAll_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lsAll_resultStandardScheme getScheme() {
        return new lsAll_resultStandardScheme();
      }
    }

    private static class lsAll_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<lsAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lsAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Link>(_list16.size);
                  Link _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new Link();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lsAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Link _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lsAll_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lsAll_resultTupleScheme getScheme() {
        return new lsAll_resultTupleScheme();
      }
    }

    private static class lsAll_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<lsAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lsAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExcp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Link _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lsAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Link>(_list21.size);
            Link _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new Link();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lsBox_args implements org.apache.thrift.TBase<lsBox_args, lsBox_args._Fields>, java.io.Serializable, Cloneable, Comparable<lsBox_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lsBox_args");

    private static final org.apache.thrift.protocol.TField BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boxId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lsBox_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lsBox_argsTupleSchemeFactory();

    public long boxId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOX_ID((short)1, "boxId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOX_ID
            return BOX_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BOXID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("boxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lsBox_args.class, metaDataMap);
    }

    public lsBox_args() {
    }

    public lsBox_args(
      long boxId)
    {
      this();
      this.boxId = boxId;
      setBoxIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lsBox_args(lsBox_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.boxId = other.boxId;
    }

    public lsBox_args deepCopy() {
      return new lsBox_args(this);
    }

    @Override
    public void clear() {
      setBoxIdIsSet(false);
      this.boxId = 0;
    }

    public long getBoxId() {
      return this.boxId;
    }

    public lsBox_args setBoxId(long boxId) {
      this.boxId = boxId;
      setBoxIdIsSet(true);
      return this;
    }

    public void unsetBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    /** Returns true if field boxId is set (has been assigned a value) and false otherwise */
    public boolean isSetBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    public void setBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOXID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOX_ID:
        if (value == null) {
          unsetBoxId();
        } else {
          setBoxId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOX_ID:
        return getBoxId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOX_ID:
        return isSetBoxId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lsBox_args)
        return this.equals((lsBox_args)that);
      return false;
    }

    public boolean equals(lsBox_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_boxId = true;
      boolean that_present_boxId = true;
      if (this_present_boxId || that_present_boxId) {
        if (!(this_present_boxId && that_present_boxId))
          return false;
        if (this.boxId != that.boxId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(boxId);

      return hashCode;
    }

    @Override
    public int compareTo(lsBox_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBoxId()).compareTo(other.isSetBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boxId, other.boxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lsBox_args(");
      boolean first = true;

      sb.append("boxId:");
      sb.append(this.boxId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lsBox_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lsBox_argsStandardScheme getScheme() {
        return new lsBox_argsStandardScheme();
      }
    }

    private static class lsBox_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<lsBox_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lsBox_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.boxId = iprot.readI64();
                struct.setBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lsBox_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.boxId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lsBox_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lsBox_argsTupleScheme getScheme() {
        return new lsBox_argsTupleScheme();
      }
    }

    private static class lsBox_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<lsBox_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lsBox_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBoxId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBoxId()) {
          oprot.writeI64(struct.boxId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lsBox_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.boxId = iprot.readI64();
          struct.setBoxIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lsBox_result implements org.apache.thrift.TBase<lsBox_result, lsBox_result._Fields>, java.io.Serializable, Cloneable, Comparable<lsBox_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lsBox_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lsBox_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lsBox_resultTupleSchemeFactory();

    public java.util.List<Link> success; // required
    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Link.class))));
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lsBox_result.class, metaDataMap);
    }

    public lsBox_result() {
    }

    public lsBox_result(
      java.util.List<Link> success,
      ServiceException excp)
    {
      this();
      this.success = success;
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lsBox_result(lsBox_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Link> __this__success = new java.util.ArrayList<Link>(other.success.size());
        for (Link other_element : other.success) {
          __this__success.add(new Link(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public lsBox_result deepCopy() {
      return new lsBox_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.excp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Link> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Link elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Link>();
      }
      this.success.add(elem);
    }

    public java.util.List<Link> getSuccess() {
      return this.success;
    }

    public lsBox_result setSuccess(java.util.List<Link> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public lsBox_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Link>)value);
        }
        break;

      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lsBox_result)
        return this.equals((lsBox_result)that);
      return false;
    }

    public boolean equals(lsBox_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(lsBox_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lsBox_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lsBox_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lsBox_resultStandardScheme getScheme() {
        return new lsBox_resultStandardScheme();
      }
    }

    private static class lsBox_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<lsBox_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lsBox_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Link>(_list24.size);
                  Link _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new Link();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lsBox_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Link _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lsBox_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lsBox_resultTupleScheme getScheme() {
        return new lsBox_resultTupleScheme();
      }
    }

    private static class lsBox_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<lsBox_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lsBox_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExcp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Link _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lsBox_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Link>(_list29.size);
            Link _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new Link();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lsInner_args implements org.apache.thrift.TBase<lsInner_args, lsInner_args._Fields>, java.io.Serializable, Cloneable, Comparable<lsInner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lsInner_args");

    private static final org.apache.thrift.protocol.TField BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boxId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("innerPath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lsInner_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lsInner_argsTupleSchemeFactory();

    public long boxId; // required
    public java.lang.String innerPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOX_ID((short)1, "boxId"),
      INNER_PATH((short)2, "innerPath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOX_ID
            return BOX_ID;
          case 2: // INNER_PATH
            return INNER_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BOXID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("boxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("innerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lsInner_args.class, metaDataMap);
    }

    public lsInner_args() {
    }

    public lsInner_args(
      long boxId,
      java.lang.String innerPath)
    {
      this();
      this.boxId = boxId;
      setBoxIdIsSet(true);
      this.innerPath = innerPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lsInner_args(lsInner_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.boxId = other.boxId;
      if (other.isSetInnerPath()) {
        this.innerPath = other.innerPath;
      }
    }

    public lsInner_args deepCopy() {
      return new lsInner_args(this);
    }

    @Override
    public void clear() {
      setBoxIdIsSet(false);
      this.boxId = 0;
      this.innerPath = null;
    }

    public long getBoxId() {
      return this.boxId;
    }

    public lsInner_args setBoxId(long boxId) {
      this.boxId = boxId;
      setBoxIdIsSet(true);
      return this;
    }

    public void unsetBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    /** Returns true if field boxId is set (has been assigned a value) and false otherwise */
    public boolean isSetBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    public void setBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOXID_ISSET_ID, value);
    }

    public java.lang.String getInnerPath() {
      return this.innerPath;
    }

    public lsInner_args setInnerPath(java.lang.String innerPath) {
      this.innerPath = innerPath;
      return this;
    }

    public void unsetInnerPath() {
      this.innerPath = null;
    }

    /** Returns true if field innerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInnerPath() {
      return this.innerPath != null;
    }

    public void setInnerPathIsSet(boolean value) {
      if (!value) {
        this.innerPath = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOX_ID:
        if (value == null) {
          unsetBoxId();
        } else {
          setBoxId((java.lang.Long)value);
        }
        break;

      case INNER_PATH:
        if (value == null) {
          unsetInnerPath();
        } else {
          setInnerPath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOX_ID:
        return getBoxId();

      case INNER_PATH:
        return getInnerPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOX_ID:
        return isSetBoxId();
      case INNER_PATH:
        return isSetInnerPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lsInner_args)
        return this.equals((lsInner_args)that);
      return false;
    }

    public boolean equals(lsInner_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_boxId = true;
      boolean that_present_boxId = true;
      if (this_present_boxId || that_present_boxId) {
        if (!(this_present_boxId && that_present_boxId))
          return false;
        if (this.boxId != that.boxId)
          return false;
      }

      boolean this_present_innerPath = true && this.isSetInnerPath();
      boolean that_present_innerPath = true && that.isSetInnerPath();
      if (this_present_innerPath || that_present_innerPath) {
        if (!(this_present_innerPath && that_present_innerPath))
          return false;
        if (!this.innerPath.equals(that.innerPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(boxId);

      hashCode = hashCode * 8191 + ((isSetInnerPath()) ? 131071 : 524287);
      if (isSetInnerPath())
        hashCode = hashCode * 8191 + innerPath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(lsInner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBoxId()).compareTo(other.isSetBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boxId, other.boxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInnerPath()).compareTo(other.isSetInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerPath, other.innerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lsInner_args(");
      boolean first = true;

      sb.append("boxId:");
      sb.append(this.boxId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("innerPath:");
      if (this.innerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.innerPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lsInner_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lsInner_argsStandardScheme getScheme() {
        return new lsInner_argsStandardScheme();
      }
    }

    private static class lsInner_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<lsInner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lsInner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.boxId = iprot.readI64();
                struct.setBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.innerPath = iprot.readString();
                struct.setInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lsInner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.boxId);
        oprot.writeFieldEnd();
        if (struct.innerPath != null) {
          oprot.writeFieldBegin(INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.innerPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lsInner_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lsInner_argsTupleScheme getScheme() {
        return new lsInner_argsTupleScheme();
      }
    }

    private static class lsInner_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<lsInner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lsInner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBoxId()) {
          optionals.set(0);
        }
        if (struct.isSetInnerPath()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBoxId()) {
          oprot.writeI64(struct.boxId);
        }
        if (struct.isSetInnerPath()) {
          oprot.writeString(struct.innerPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lsInner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.boxId = iprot.readI64();
          struct.setBoxIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.innerPath = iprot.readString();
          struct.setInnerPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lsInner_result implements org.apache.thrift.TBase<lsInner_result, lsInner_result._Fields>, java.io.Serializable, Cloneable, Comparable<lsInner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lsInner_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lsInner_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lsInner_resultTupleSchemeFactory();

    public java.util.List<Link> success; // required
    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Link.class))));
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lsInner_result.class, metaDataMap);
    }

    public lsInner_result() {
    }

    public lsInner_result(
      java.util.List<Link> success,
      ServiceException excp)
    {
      this();
      this.success = success;
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lsInner_result(lsInner_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Link> __this__success = new java.util.ArrayList<Link>(other.success.size());
        for (Link other_element : other.success) {
          __this__success.add(new Link(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public lsInner_result deepCopy() {
      return new lsInner_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.excp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Link> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Link elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Link>();
      }
      this.success.add(elem);
    }

    public java.util.List<Link> getSuccess() {
      return this.success;
    }

    public lsInner_result setSuccess(java.util.List<Link> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public lsInner_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Link>)value);
        }
        break;

      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lsInner_result)
        return this.equals((lsInner_result)that);
      return false;
    }

    public boolean equals(lsInner_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(lsInner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lsInner_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lsInner_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lsInner_resultStandardScheme getScheme() {
        return new lsInner_resultStandardScheme();
      }
    }

    private static class lsInner_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<lsInner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lsInner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Link>(_list32.size);
                  Link _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new Link();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lsInner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Link _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lsInner_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lsInner_resultTupleScheme getScheme() {
        return new lsInner_resultTupleScheme();
      }
    }

    private static class lsInner_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<lsInner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lsInner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExcp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Link _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lsInner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Link>(_list37.size);
            Link _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new Link();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeAll_args implements org.apache.thrift.TBase<removeAll_args, removeAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAll_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeAll_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeAll_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAll_args.class, metaDataMap);
    }

    public removeAll_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAll_args(removeAll_args other) {
    }

    public removeAll_args deepCopy() {
      return new removeAll_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAll_args)
        return this.equals((removeAll_args)that);
      return false;
    }

    public boolean equals(removeAll_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(removeAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeAll_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAll_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_argsStandardScheme getScheme() {
        return new removeAll_argsStandardScheme();
      }
    }

    private static class removeAll_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAll_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_argsTupleScheme getScheme() {
        return new removeAll_argsTupleScheme();
      }
    }

    private static class removeAll_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeAll_result implements org.apache.thrift.TBase<removeAll_result, removeAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeAll_result");

    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeAll_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeAll_resultTupleSchemeFactory();

    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeAll_result.class, metaDataMap);
    }

    public removeAll_result() {
    }

    public removeAll_result(
      ServiceException excp)
    {
      this();
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAll_result(removeAll_result other) {
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public removeAll_result deepCopy() {
      return new removeAll_result(this);
    }

    @Override
    public void clear() {
      this.excp = null;
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public removeAll_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAll_result)
        return this.equals((removeAll_result)that);
      return false;
    }

    public boolean equals(removeAll_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeAll_result(");
      boolean first = true;

      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeAll_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_resultStandardScheme getScheme() {
        return new removeAll_resultStandardScheme();
      }
    }

    private static class removeAll_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeAll_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeAll_resultTupleScheme getScheme() {
        return new removeAll_resultTupleScheme();
      }
    }

    private static class removeAll_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExcp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeById_args implements org.apache.thrift.TBase<removeById_args, removeById_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeById_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeById_argsTupleSchemeFactory();

    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeById_args.class, metaDataMap);
    }

    public removeById_args() {
    }

    public removeById_args(
      long id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeById_args(removeById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public removeById_args deepCopy() {
      return new removeById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public long getId() {
      return this.id;
    }

    public removeById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeById_args)
        return this.equals((removeById_args)that);
      return false;
    }

    public boolean equals(removeById_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

      return hashCode;
    }

    @Override
    public int compareTo(removeById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeById_argsStandardScheme getScheme() {
        return new removeById_argsStandardScheme();
      }
    }

    private static class removeById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeById_argsTupleScheme getScheme() {
        return new removeById_argsTupleScheme();
      }
    }

    private static class removeById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeById_result implements org.apache.thrift.TBase<removeById_result, removeById_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeById_result");

    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeById_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeById_resultTupleSchemeFactory();

    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeById_result.class, metaDataMap);
    }

    public removeById_result() {
    }

    public removeById_result(
      ServiceException excp)
    {
      this();
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeById_result(removeById_result other) {
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public removeById_result deepCopy() {
      return new removeById_result(this);
    }

    @Override
    public void clear() {
      this.excp = null;
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public removeById_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeById_result)
        return this.equals((removeById_result)that);
      return false;
    }

    public boolean equals(removeById_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeById_result(");
      boolean first = true;

      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeById_resultStandardScheme getScheme() {
        return new removeById_resultStandardScheme();
      }
    }

    private static class removeById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeById_resultTupleScheme getScheme() {
        return new removeById_resultTupleScheme();
      }
    }

    private static class removeById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExcp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeByBox_args implements org.apache.thrift.TBase<removeByBox_args, removeByBox_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeByBox_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeByBox_args");

    private static final org.apache.thrift.protocol.TField BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boxId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeByBox_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeByBox_argsTupleSchemeFactory();

    public long boxId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOX_ID((short)1, "boxId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOX_ID
            return BOX_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BOXID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("boxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeByBox_args.class, metaDataMap);
    }

    public removeByBox_args() {
    }

    public removeByBox_args(
      long boxId)
    {
      this();
      this.boxId = boxId;
      setBoxIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeByBox_args(removeByBox_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.boxId = other.boxId;
    }

    public removeByBox_args deepCopy() {
      return new removeByBox_args(this);
    }

    @Override
    public void clear() {
      setBoxIdIsSet(false);
      this.boxId = 0;
    }

    public long getBoxId() {
      return this.boxId;
    }

    public removeByBox_args setBoxId(long boxId) {
      this.boxId = boxId;
      setBoxIdIsSet(true);
      return this;
    }

    public void unsetBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    /** Returns true if field boxId is set (has been assigned a value) and false otherwise */
    public boolean isSetBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    public void setBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOXID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOX_ID:
        if (value == null) {
          unsetBoxId();
        } else {
          setBoxId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOX_ID:
        return getBoxId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOX_ID:
        return isSetBoxId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeByBox_args)
        return this.equals((removeByBox_args)that);
      return false;
    }

    public boolean equals(removeByBox_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_boxId = true;
      boolean that_present_boxId = true;
      if (this_present_boxId || that_present_boxId) {
        if (!(this_present_boxId && that_present_boxId))
          return false;
        if (this.boxId != that.boxId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(boxId);

      return hashCode;
    }

    @Override
    public int compareTo(removeByBox_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBoxId()).compareTo(other.isSetBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boxId, other.boxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeByBox_args(");
      boolean first = true;

      sb.append("boxId:");
      sb.append(this.boxId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeByBox_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeByBox_argsStandardScheme getScheme() {
        return new removeByBox_argsStandardScheme();
      }
    }

    private static class removeByBox_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeByBox_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeByBox_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.boxId = iprot.readI64();
                struct.setBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeByBox_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.boxId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeByBox_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeByBox_argsTupleScheme getScheme() {
        return new removeByBox_argsTupleScheme();
      }
    }

    private static class removeByBox_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeByBox_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeByBox_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBoxId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBoxId()) {
          oprot.writeI64(struct.boxId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeByBox_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.boxId = iprot.readI64();
          struct.setBoxIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeByBox_result implements org.apache.thrift.TBase<removeByBox_result, removeByBox_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeByBox_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeByBox_result");

    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeByBox_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeByBox_resultTupleSchemeFactory();

    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeByBox_result.class, metaDataMap);
    }

    public removeByBox_result() {
    }

    public removeByBox_result(
      ServiceException excp)
    {
      this();
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeByBox_result(removeByBox_result other) {
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public removeByBox_result deepCopy() {
      return new removeByBox_result(this);
    }

    @Override
    public void clear() {
      this.excp = null;
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public removeByBox_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeByBox_result)
        return this.equals((removeByBox_result)that);
      return false;
    }

    public boolean equals(removeByBox_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeByBox_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeByBox_result(");
      boolean first = true;

      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeByBox_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeByBox_resultStandardScheme getScheme() {
        return new removeByBox_resultStandardScheme();
      }
    }

    private static class removeByBox_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeByBox_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeByBox_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeByBox_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeByBox_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeByBox_resultTupleScheme getScheme() {
        return new removeByBox_resultTupleScheme();
      }
    }

    private static class removeByBox_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeByBox_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeByBox_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExcp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeByBox_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeByInner_args implements org.apache.thrift.TBase<removeByInner_args, removeByInner_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeByInner_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeByInner_args");

    private static final org.apache.thrift.protocol.TField BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boxId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("innerPath", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeByInner_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeByInner_argsTupleSchemeFactory();

    public long boxId; // required
    public java.lang.String innerPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOX_ID((short)1, "boxId"),
      INNER_PATH((short)2, "innerPath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOX_ID
            return BOX_ID;
          case 2: // INNER_PATH
            return INNER_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BOXID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("boxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("innerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeByInner_args.class, metaDataMap);
    }

    public removeByInner_args() {
    }

    public removeByInner_args(
      long boxId,
      java.lang.String innerPath)
    {
      this();
      this.boxId = boxId;
      setBoxIdIsSet(true);
      this.innerPath = innerPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeByInner_args(removeByInner_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.boxId = other.boxId;
      if (other.isSetInnerPath()) {
        this.innerPath = other.innerPath;
      }
    }

    public removeByInner_args deepCopy() {
      return new removeByInner_args(this);
    }

    @Override
    public void clear() {
      setBoxIdIsSet(false);
      this.boxId = 0;
      this.innerPath = null;
    }

    public long getBoxId() {
      return this.boxId;
    }

    public removeByInner_args setBoxId(long boxId) {
      this.boxId = boxId;
      setBoxIdIsSet(true);
      return this;
    }

    public void unsetBoxId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    /** Returns true if field boxId is set (has been assigned a value) and false otherwise */
    public boolean isSetBoxId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOXID_ISSET_ID);
    }

    public void setBoxIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOXID_ISSET_ID, value);
    }

    public java.lang.String getInnerPath() {
      return this.innerPath;
    }

    public removeByInner_args setInnerPath(java.lang.String innerPath) {
      this.innerPath = innerPath;
      return this;
    }

    public void unsetInnerPath() {
      this.innerPath = null;
    }

    /** Returns true if field innerPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInnerPath() {
      return this.innerPath != null;
    }

    public void setInnerPathIsSet(boolean value) {
      if (!value) {
        this.innerPath = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOX_ID:
        if (value == null) {
          unsetBoxId();
        } else {
          setBoxId((java.lang.Long)value);
        }
        break;

      case INNER_PATH:
        if (value == null) {
          unsetInnerPath();
        } else {
          setInnerPath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOX_ID:
        return getBoxId();

      case INNER_PATH:
        return getInnerPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOX_ID:
        return isSetBoxId();
      case INNER_PATH:
        return isSetInnerPath();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeByInner_args)
        return this.equals((removeByInner_args)that);
      return false;
    }

    public boolean equals(removeByInner_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_boxId = true;
      boolean that_present_boxId = true;
      if (this_present_boxId || that_present_boxId) {
        if (!(this_present_boxId && that_present_boxId))
          return false;
        if (this.boxId != that.boxId)
          return false;
      }

      boolean this_present_innerPath = true && this.isSetInnerPath();
      boolean that_present_innerPath = true && that.isSetInnerPath();
      if (this_present_innerPath || that_present_innerPath) {
        if (!(this_present_innerPath && that_present_innerPath))
          return false;
        if (!this.innerPath.equals(that.innerPath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(boxId);

      hashCode = hashCode * 8191 + ((isSetInnerPath()) ? 131071 : 524287);
      if (isSetInnerPath())
        hashCode = hashCode * 8191 + innerPath.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeByInner_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBoxId()).compareTo(other.isSetBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBoxId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boxId, other.boxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInnerPath()).compareTo(other.isSetInnerPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInnerPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerPath, other.innerPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeByInner_args(");
      boolean first = true;

      sb.append("boxId:");
      sb.append(this.boxId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("innerPath:");
      if (this.innerPath == null) {
        sb.append("null");
      } else {
        sb.append(this.innerPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeByInner_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeByInner_argsStandardScheme getScheme() {
        return new removeByInner_argsStandardScheme();
      }
    }

    private static class removeByInner_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeByInner_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeByInner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOX_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.boxId = iprot.readI64();
                struct.setBoxIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INNER_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.innerPath = iprot.readString();
                struct.setInnerPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeByInner_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BOX_ID_FIELD_DESC);
        oprot.writeI64(struct.boxId);
        oprot.writeFieldEnd();
        if (struct.innerPath != null) {
          oprot.writeFieldBegin(INNER_PATH_FIELD_DESC);
          oprot.writeString(struct.innerPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeByInner_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeByInner_argsTupleScheme getScheme() {
        return new removeByInner_argsTupleScheme();
      }
    }

    private static class removeByInner_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeByInner_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeByInner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBoxId()) {
          optionals.set(0);
        }
        if (struct.isSetInnerPath()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBoxId()) {
          oprot.writeI64(struct.boxId);
        }
        if (struct.isSetInnerPath()) {
          oprot.writeString(struct.innerPath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeByInner_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.boxId = iprot.readI64();
          struct.setBoxIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.innerPath = iprot.readString();
          struct.setInnerPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeByInner_result implements org.apache.thrift.TBase<removeByInner_result, removeByInner_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeByInner_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeByInner_result");

    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeByInner_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeByInner_resultTupleSchemeFactory();

    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeByInner_result.class, metaDataMap);
    }

    public removeByInner_result() {
    }

    public removeByInner_result(
      ServiceException excp)
    {
      this();
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeByInner_result(removeByInner_result other) {
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public removeByInner_result deepCopy() {
      return new removeByInner_result(this);
    }

    @Override
    public void clear() {
      this.excp = null;
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public removeByInner_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeByInner_result)
        return this.equals((removeByInner_result)that);
      return false;
    }

    public boolean equals(removeByInner_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeByInner_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeByInner_result(");
      boolean first = true;

      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeByInner_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeByInner_resultStandardScheme getScheme() {
        return new removeByInner_resultStandardScheme();
      }
    }

    private static class removeByInner_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeByInner_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeByInner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeByInner_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeByInner_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeByInner_resultTupleScheme getScheme() {
        return new removeByInner_resultTupleScheme();
      }
    }

    private static class removeByInner_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeByInner_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeByInner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExcp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeByInner_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeByDestination_args implements org.apache.thrift.TBase<removeByDestination_args, removeByDestination_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeByDestination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeByDestination_args");

    private static final org.apache.thrift.protocol.TField DESTINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("destination", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeByDestination_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeByDestination_argsTupleSchemeFactory();

    public java.lang.String destination; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DESTINATION((short)1, "destination");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DESTINATION
            return DESTINATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DESTINATION, new org.apache.thrift.meta_data.FieldMetaData("destination", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeByDestination_args.class, metaDataMap);
    }

    public removeByDestination_args() {
    }

    public removeByDestination_args(
      java.lang.String destination)
    {
      this();
      this.destination = destination;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeByDestination_args(removeByDestination_args other) {
      if (other.isSetDestination()) {
        this.destination = other.destination;
      }
    }

    public removeByDestination_args deepCopy() {
      return new removeByDestination_args(this);
    }

    @Override
    public void clear() {
      this.destination = null;
    }

    public java.lang.String getDestination() {
      return this.destination;
    }

    public removeByDestination_args setDestination(java.lang.String destination) {
      this.destination = destination;
      return this;
    }

    public void unsetDestination() {
      this.destination = null;
    }

    /** Returns true if field destination is set (has been assigned a value) and false otherwise */
    public boolean isSetDestination() {
      return this.destination != null;
    }

    public void setDestinationIsSet(boolean value) {
      if (!value) {
        this.destination = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DESTINATION:
        if (value == null) {
          unsetDestination();
        } else {
          setDestination((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DESTINATION:
        return getDestination();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DESTINATION:
        return isSetDestination();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeByDestination_args)
        return this.equals((removeByDestination_args)that);
      return false;
    }

    public boolean equals(removeByDestination_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_destination = true && this.isSetDestination();
      boolean that_present_destination = true && that.isSetDestination();
      if (this_present_destination || that_present_destination) {
        if (!(this_present_destination && that_present_destination))
          return false;
        if (!this.destination.equals(that.destination))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDestination()) ? 131071 : 524287);
      if (isSetDestination())
        hashCode = hashCode * 8191 + destination.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeByDestination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDestination()).compareTo(other.isSetDestination());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDestination()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destination, other.destination);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeByDestination_args(");
      boolean first = true;

      sb.append("destination:");
      if (this.destination == null) {
        sb.append("null");
      } else {
        sb.append(this.destination);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeByDestination_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeByDestination_argsStandardScheme getScheme() {
        return new removeByDestination_argsStandardScheme();
      }
    }

    private static class removeByDestination_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeByDestination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeByDestination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DESTINATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.destination = iprot.readString();
                struct.setDestinationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeByDestination_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.destination != null) {
          oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
          oprot.writeString(struct.destination);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeByDestination_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeByDestination_argsTupleScheme getScheme() {
        return new removeByDestination_argsTupleScheme();
      }
    }

    private static class removeByDestination_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeByDestination_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeByDestination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDestination()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDestination()) {
          oprot.writeString(struct.destination);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeByDestination_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.destination = iprot.readString();
          struct.setDestinationIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeByDestination_result implements org.apache.thrift.TBase<removeByDestination_result, removeByDestination_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeByDestination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeByDestination_result");

    private static final org.apache.thrift.protocol.TField EXCP_FIELD_DESC = new org.apache.thrift.protocol.TField("excp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeByDestination_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeByDestination_resultTupleSchemeFactory();

    public ServiceException excp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXCP((short)1, "excp");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXCP
            return EXCP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXCP, new org.apache.thrift.meta_data.FieldMetaData("excp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServiceException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeByDestination_result.class, metaDataMap);
    }

    public removeByDestination_result() {
    }

    public removeByDestination_result(
      ServiceException excp)
    {
      this();
      this.excp = excp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeByDestination_result(removeByDestination_result other) {
      if (other.isSetExcp()) {
        this.excp = new ServiceException(other.excp);
      }
    }

    public removeByDestination_result deepCopy() {
      return new removeByDestination_result(this);
    }

    @Override
    public void clear() {
      this.excp = null;
    }

    public ServiceException getExcp() {
      return this.excp;
    }

    public removeByDestination_result setExcp(ServiceException excp) {
      this.excp = excp;
      return this;
    }

    public void unsetExcp() {
      this.excp = null;
    }

    /** Returns true if field excp is set (has been assigned a value) and false otherwise */
    public boolean isSetExcp() {
      return this.excp != null;
    }

    public void setExcpIsSet(boolean value) {
      if (!value) {
        this.excp = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case EXCP:
        if (value == null) {
          unsetExcp();
        } else {
          setExcp((ServiceException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EXCP:
        return getExcp();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EXCP:
        return isSetExcp();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeByDestination_result)
        return this.equals((removeByDestination_result)that);
      return false;
    }

    public boolean equals(removeByDestination_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_excp = true && this.isSetExcp();
      boolean that_present_excp = true && that.isSetExcp();
      if (this_present_excp || that_present_excp) {
        if (!(this_present_excp && that_present_excp))
          return false;
        if (!this.excp.equals(that.excp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetExcp()) ? 131071 : 524287);
      if (isSetExcp())
        hashCode = hashCode * 8191 + excp.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeByDestination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetExcp()).compareTo(other.isSetExcp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excp, other.excp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeByDestination_result(");
      boolean first = true;

      sb.append("excp:");
      if (this.excp == null) {
        sb.append("null");
      } else {
        sb.append(this.excp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeByDestination_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeByDestination_resultStandardScheme getScheme() {
        return new removeByDestination_resultStandardScheme();
      }
    }

    private static class removeByDestination_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeByDestination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeByDestination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXCP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.excp = new ServiceException();
                struct.excp.read(iprot);
                struct.setExcpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeByDestination_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.excp != null) {
          oprot.writeFieldBegin(EXCP_FIELD_DESC);
          struct.excp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeByDestination_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeByDestination_resultTupleScheme getScheme() {
        return new removeByDestination_resultTupleScheme();
      }
    }

    private static class removeByDestination_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeByDestination_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeByDestination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetExcp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExcp()) {
          struct.excp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeByDestination_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.excp = new ServiceException();
          struct.excp.read(iprot);
          struct.setExcpIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
