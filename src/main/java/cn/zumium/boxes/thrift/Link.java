/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.zumium.boxes.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-01-29")
public class Link implements org.apache.thrift.TBase<Link, Link._Fields>, java.io.Serializable, Cloneable, Comparable<Link> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Link");

  private static final org.apache.thrift.protocol.TField BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boxId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField INNER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("innerPath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESTINATION_FIELD_DESC = new org.apache.thrift.protocol.TField("destination", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LinkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LinkTupleSchemeFactory();

  public long boxId; // required
  public java.lang.String innerPath; // required
  public java.lang.String destination; // required
  /**
   * 
   * @see LinkType
   */
  public LinkType type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOX_ID((short)1, "boxId"),
    INNER_PATH((short)2, "innerPath"),
    DESTINATION((short)3, "destination"),
    /**
     * 
     * @see LinkType
     */
    TYPE((short)4, "type");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOX_ID
          return BOX_ID;
        case 2: // INNER_PATH
          return INNER_PATH;
        case 3: // DESTINATION
          return DESTINATION;
        case 4: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOXID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("boxId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INNER_PATH, new org.apache.thrift.meta_data.FieldMetaData("innerPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESTINATION, new org.apache.thrift.meta_data.FieldMetaData("destination", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LinkType.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Link.class, metaDataMap);
  }

  public Link() {
  }

  public Link(
    long boxId,
    java.lang.String innerPath,
    java.lang.String destination,
    LinkType type)
  {
    this();
    this.boxId = boxId;
    setBoxIdIsSet(true);
    this.innerPath = innerPath;
    this.destination = destination;
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Link(Link other) {
    __isset_bitfield = other.__isset_bitfield;
    this.boxId = other.boxId;
    if (other.isSetInnerPath()) {
      this.innerPath = other.innerPath;
    }
    if (other.isSetDestination()) {
      this.destination = other.destination;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
  }

  public Link deepCopy() {
    return new Link(this);
  }

  @Override
  public void clear() {
    setBoxIdIsSet(false);
    this.boxId = 0;
    this.innerPath = null;
    this.destination = null;
    this.type = null;
  }

  public long getBoxId() {
    return this.boxId;
  }

  public Link setBoxId(long boxId) {
    this.boxId = boxId;
    setBoxIdIsSet(true);
    return this;
  }

  public void unsetBoxId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOXID_ISSET_ID);
  }

  /** Returns true if field boxId is set (has been assigned a value) and false otherwise */
  public boolean isSetBoxId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOXID_ISSET_ID);
  }

  public void setBoxIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOXID_ISSET_ID, value);
  }

  public java.lang.String getInnerPath() {
    return this.innerPath;
  }

  public Link setInnerPath(java.lang.String innerPath) {
    this.innerPath = innerPath;
    return this;
  }

  public void unsetInnerPath() {
    this.innerPath = null;
  }

  /** Returns true if field innerPath is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerPath() {
    return this.innerPath != null;
  }

  public void setInnerPathIsSet(boolean value) {
    if (!value) {
      this.innerPath = null;
    }
  }

  public java.lang.String getDestination() {
    return this.destination;
  }

  public Link setDestination(java.lang.String destination) {
    this.destination = destination;
    return this;
  }

  public void unsetDestination() {
    this.destination = null;
  }

  /** Returns true if field destination is set (has been assigned a value) and false otherwise */
  public boolean isSetDestination() {
    return this.destination != null;
  }

  public void setDestinationIsSet(boolean value) {
    if (!value) {
      this.destination = null;
    }
  }

  /**
   * 
   * @see LinkType
   */
  public LinkType getType() {
    return this.type;
  }

  /**
   * 
   * @see LinkType
   */
  public Link setType(LinkType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BOX_ID:
      if (value == null) {
        unsetBoxId();
      } else {
        setBoxId((java.lang.Long)value);
      }
      break;

    case INNER_PATH:
      if (value == null) {
        unsetInnerPath();
      } else {
        setInnerPath((java.lang.String)value);
      }
      break;

    case DESTINATION:
      if (value == null) {
        unsetDestination();
      } else {
        setDestination((java.lang.String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((LinkType)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BOX_ID:
      return getBoxId();

    case INNER_PATH:
      return getInnerPath();

    case DESTINATION:
      return getDestination();

    case TYPE:
      return getType();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BOX_ID:
      return isSetBoxId();
    case INNER_PATH:
      return isSetInnerPath();
    case DESTINATION:
      return isSetDestination();
    case TYPE:
      return isSetType();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Link)
      return this.equals((Link)that);
    return false;
  }

  public boolean equals(Link that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_boxId = true;
    boolean that_present_boxId = true;
    if (this_present_boxId || that_present_boxId) {
      if (!(this_present_boxId && that_present_boxId))
        return false;
      if (this.boxId != that.boxId)
        return false;
    }

    boolean this_present_innerPath = true && this.isSetInnerPath();
    boolean that_present_innerPath = true && that.isSetInnerPath();
    if (this_present_innerPath || that_present_innerPath) {
      if (!(this_present_innerPath && that_present_innerPath))
        return false;
      if (!this.innerPath.equals(that.innerPath))
        return false;
    }

    boolean this_present_destination = true && this.isSetDestination();
    boolean that_present_destination = true && that.isSetDestination();
    if (this_present_destination || that_present_destination) {
      if (!(this_present_destination && that_present_destination))
        return false;
      if (!this.destination.equals(that.destination))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(boxId);

    hashCode = hashCode * 8191 + ((isSetInnerPath()) ? 131071 : 524287);
    if (isSetInnerPath())
      hashCode = hashCode * 8191 + innerPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetDestination()) ? 131071 : 524287);
    if (isSetDestination())
      hashCode = hashCode * 8191 + destination.hashCode();

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(Link other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBoxId()).compareTo(other.isSetBoxId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoxId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boxId, other.boxId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInnerPath()).compareTo(other.isSetInnerPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerPath, other.innerPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDestination()).compareTo(other.isSetDestination());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDestination()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destination, other.destination);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Link(");
    boolean first = true;

    sb.append("boxId:");
    sb.append(this.boxId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("innerPath:");
    if (this.innerPath == null) {
      sb.append("null");
    } else {
      sb.append(this.innerPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("destination:");
    if (this.destination == null) {
      sb.append("null");
    } else {
      sb.append(this.destination);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LinkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LinkStandardScheme getScheme() {
      return new LinkStandardScheme();
    }
  }

  private static class LinkStandardScheme extends org.apache.thrift.scheme.StandardScheme<Link> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Link struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.boxId = iprot.readI64();
              struct.setBoxIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INNER_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.innerPath = iprot.readString();
              struct.setInnerPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESTINATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destination = iprot.readString();
              struct.setDestinationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = cn.zumium.boxes.thrift.LinkType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Link struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOX_ID_FIELD_DESC);
      oprot.writeI64(struct.boxId);
      oprot.writeFieldEnd();
      if (struct.innerPath != null) {
        oprot.writeFieldBegin(INNER_PATH_FIELD_DESC);
        oprot.writeString(struct.innerPath);
        oprot.writeFieldEnd();
      }
      if (struct.destination != null) {
        oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
        oprot.writeString(struct.destination);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LinkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LinkTupleScheme getScheme() {
      return new LinkTupleScheme();
    }
  }

  private static class LinkTupleScheme extends org.apache.thrift.scheme.TupleScheme<Link> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Link struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBoxId()) {
        optionals.set(0);
      }
      if (struct.isSetInnerPath()) {
        optionals.set(1);
      }
      if (struct.isSetDestination()) {
        optionals.set(2);
      }
      if (struct.isSetType()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBoxId()) {
        oprot.writeI64(struct.boxId);
      }
      if (struct.isSetInnerPath()) {
        oprot.writeString(struct.innerPath);
      }
      if (struct.isSetDestination()) {
        oprot.writeString(struct.destination);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Link struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.boxId = iprot.readI64();
        struct.setBoxIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.innerPath = iprot.readString();
        struct.setInnerPathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.destination = iprot.readString();
        struct.setDestinationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.type = cn.zumium.boxes.thrift.LinkType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

